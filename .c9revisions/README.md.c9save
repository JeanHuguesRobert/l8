{"ts":1351024727291,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"l8\n==\n\nLight task manager for javascript"]],"start1":0,"start2":0,"length1":0,"length2":40}]],"length":40}
{"contributors":[],"silentsave":false,"ts":1351024733131,"patch":[[{"diffs":[[0,"l8"],[1,"\r"],[0,"\n=="],[-1,"\n"],[1,"\r\n\r"],[0,"\nLig"]],"start1":0,"start2":0,"length1":10,"length2":13},{"diffs":[[0,"vascript"],[1,"\r\n\r\nSchedule the execution of multiple \"tasks\". A task is made of \"steps\", much\r\nlike a function is made of statements. Tasks can nest, much like blocks of\r\nstatements. The main flow control structures are the sequential execution of\r\nsteps, steps that loop until they exit, steps that wait for something and\r\nerror propagation similar to exception handling.\r\n\r\nExecution goes from \"step\" to \"step\" by way of \"walk\". If one cannot walk a\r\nstep, one can wait for something and retry later.\r\n\r\n  l8.begin              -- enter new scope\r\n    .scope( function )  -- return the L8 scope guarded version of a function\r\n    .step( block )      -- queue a new step\r\n    .walk( block )      -- walk a step, at most once by step\r\n    .loop               -- enter a non blocking loop, made of iterative steps\r\n    .next               -- enter next iteration step in a non blocking loop\r\n    .repeat( block )    -- enter a blocking loop\r\n    .restart            -- like \"continue\", for blocking loops\r\n    .exit               -- like \"break\", exit blocking loop or task\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( block )     -- starts a new sub task\r\n    .queue()            -- schedule a new sub task\r\n    .cancel             -- cancel task & its sub tasks, brutal\r\n    .stop               -- gentle cancel\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .delay( milli )     -- block for a while, then reschedule step\r\n    .wait( lock )       -- queue step until some lock opens, then retry\r\n    .resume             -- resume execution of a task waiting at some step\r\n    .stopping           -- true after a gentle cancel, until task is done\r\n    .failed             -- true if task done but with an error\r\n    .succeed            -- true if task done without error\r\n    .done               -- true if task done, else it either wait or runs\r\n    .running            -- true if task not done\r\n    .waiting            -- true if task waiting while running (ie is queued)\r\n    .err                -- returns last raised error\r\n    .canceled           -- true if task was canceled\r\n    .stopped            -- true if task was gently canceled (gracefull)\r\n    .l8                 -- return global L8 object\r\n    .then( ... )        -- Promise/A protocol\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done\r\n    .final( block )     -- block to run when task is all done\r\n    .end                -- leave scope or loop, return current task\r\n\r\nTBD: semaphores, locks, message queues, signals, etc...\r\n\r\nExamples\r\n--------\r\n\r\n  function fetch_this_and_that( a, b, callback ){\r\n    var result_a = null\r\n    var result_b = null\r\n    // Hypothetical synchrone version\r\n    // result_a = fetch( a)\r\n    // if( !result_a.err ){\r\n    //   result_b = fetch( b)\r\n    // }\r\n    // callback( result_a.err || result_b.err, result_b.content)\r\n  l8.begin\r\n    .step( function(){\r\n      fetch(\r\n        a,\r\n        this.walk( function( err, content ){\r\n          result_a = { err: err, content: content }\r\n        })\r\n      )\r\n    })\r\n    .step( function(){\r\n      if( result_a.err ) this.raise( result_a.err)\r\n      fetch(\r\n        b,\r\n        this.walk( function( err, content ){\r\n          result_b = { err: err, content: content }\r\n        })\r\n      )\r\n    })\r\n    .final( function(){ callback( this.err, result_b) }) \r\n  .end}\r\n  \r\n  Coffeescript, shorter, also thanks to scope() functor\r\n  fetch_this_and_that = l8.scope (a,b,cb) ->\r\n    r_a = r_b = undefined \r\n    @step  -> fetch a, @walk (err,content) -> r_a = {err,content}\r\n    @step  ->\r\n      @raise r_a.err if r_a.err\r\n      fetch b, @walk (err,content) -> r_b = {err,content}\r\n    @final -> cb @err, r_b.content\r\n     \r\n\r\n  function fetch_all( urls, callback ){\r\n    var results = []\r\n    l8.begin\r\n      .step( function(){\r\n        this.loop; for( var url in urls ){\r\n          this.next\r\n          fetch( url, this.spawn( function( err, content ){\r\n            result.push({ url: url, err: err, content: content })\r\n          }))\r\n        }\r\n        this.end\r\n      })\r\n      .final( function(){ callback( results ) })\r\n    .end\r\n  }\r\n  \r\n  fetch_all = l8.scope (urls, callback) ->\r\n    result = []\r\n    @step ->\r\n      @loop; for url in urls\r\n        @next\r\n        fetch url, @spawn (err, content) ->\r\n          result.push {url, err, content}\r\n      @end\r\n    @final -> callback results    \r\n        \r\n\r\n  function fetch_all_seq( urls, callback ){\r\n    var results = []\r\n    l8.begin\r\n      .step( function(){\r\n        this.loop; for( var url in urls ){\r\n          this.step( function(){\r\n            fetch( url, this.walk( function( err, content ){\r\n              result.push({ url: url, err: err, content: content })\r\n            }))\r\n          })\r\n        }\r\n        this.end\r\n      })\r\n      .final( function(){ callback( results ) })\r\n    .end\r\n  }\r\n  \r\n  fetch_all_seq = l8.scope (urls, callback ) ->\r\n    results = []\r\n    @step ->\r\n      @loop; for url in urls\r\n        @step -> fetch url, @walk -> result.push {url, err, content}\r\n      @end\r\n    @final -> callback results\r\n\r\n\r\n  spider = l8.scope ( urls ) ->\r\n    queue = urls\r\n    @repeat ->\r\n      @step -> url = queue.shift\r\n      @step -> @wait 10000 if @parent.tasks.length > 10\r\n      @step ->\r\n        @exit if @stopping   \r\n        fetch url, @walk (err,urls) ->\r\n          return if err\r\n          for url in urls\r\n            queue.unshift url unless url in queue\r\n   \r\n  stop_spider -> spider.stop\r\n  "]],"start1":35,"start2":35,"length1":8,"length2":5805}]],"length":5840,"saved":false}
{"ts":1351082532955,"patch":[[{"diffs":[[0,"tements."],[-1," "],[1,"\r\n\r\nExecution goes from \"step\" to \"step\" by way of \"walk\". If one cannot walk a\r\nstep, one can wait for something and maybe retry later.\r\n\r\n"],[0,"The main"]],"start1":258,"start2":258,"length1":17,"length2":156},{"diffs":[[0,"ution of"],[-1,"\r\nstep"],[1," steps,\r\nthe execution of forked steps on parallel path"],[0,"s, steps"]],"start1":462,"start2":462,"length1":22,"length2":71},{"diffs":[[0,"til they"],[-1," "],[1,"\r\n"],[0,"exit, st"]],"start1":546,"start2":546,"length1":17,"length2":18},{"diffs":[[0,"hing and"],[-1,"\r\n"],[1," "],[0,"error pr"]],"start1":587,"start2":587,"length1":18,"length2":17},{"diffs":[[0,"tion"],[-1," handling.\r\n\r\nExecution goes from \"step\" to \"step\" by way of \"walk\". If one cannot walk a\r\nstep, one can wait for something and maybe retry later"],[1,"\r\nhandling"],[0,".\r\n\r"]],"start1":630,"start2":630,"length1":153,"length2":18},{"diffs":[[0,"e\r\n    ."],[-1,"delay"],[1,"sleep"],[0,"( milli "]],"start1":3141,"start2":3141,"length1":21,"length2":21},{"diffs":[[0,"chedule "],[-1,"step"],[1,"task"],[0,"\r\n    .w"]],"start1":3198,"start2":3198,"length1":20,"length2":20},{"diffs":[[0,"  @step -> @"],[-1,"delay"],[1,"sleep"],[0," 1000\r\n    @"]],"start1":7338,"start2":7338,"length1":29,"length2":29},{"diffs":[[0,"  @step -> @"],[-1,"delay"],[1,"sleep"],[0," 1000 * 60\r\n"]],"start1":7490,"start2":7490,"length1":29,"length2":29}]],"length":8488,"saved":false}
{"ts":1351082922797,"patch":[[{"diffs":[[0,"se steps"],[1," on multiple paths"],[0,"\"\r\n"],[-1,""],[0,"\r\nSchedu"]],"start1":89,"start2":89,"length1":19,"length2":37},{"diffs":[[0,"ements. "],[-1,"Task"],[1,"Steps are walked on multiple \"paths\".\r\nTasks and path"],[0,"s can ne"]],"start1":228,"start2":228,"length1":20,"length2":69},{"diffs":[[0,"locks of"],[-1,"\r\n"],[1," "],[0,"statemen"]],"start1":312,"start2":312,"length1":18,"length2":17},{"diffs":[[0,".\r\n\r\nl8 "],[-1,"task"],[1,"path"],[0,"s are a "]],"start1":710,"start2":710,"length1":20,"length2":20},{"diffs":[[0,"new "],[-1,"out of order step"],[1,"step on a new parallel path"],[0,"\r\n  "]],"start1":1067,"start2":1067,"length1":25,"length2":35},{"diffs":[[0,"k a step"],[1," on its path"],[0,", at mos"]],"start1":1130,"start2":1130,"length1":16,"length2":28},{"diffs":[[0,")    -- "],[-1,"enter"],[1,"queue"],[0," a block"]],"start1":1350,"start2":1350,"length1":21,"length2":21},{"diffs":[[0,"locking loop"],[1," step"],[0,"\r\n    ._cont"]],"start1":1367,"start2":1367,"length1":24,"length2":29}]],"length":8581,"saved":false}
{"ts":1351083342068,"patch":[[{"diffs":[[0,"r blocking loops"],[1," and forked steps"],[0,"\r\n    ._return  "]],"start1":1487,"start2":1487,"length1":32,"length2":49}]],"length":8598,"saved":false}
{"ts":1351083883340,"patch":[[{"diffs":[[0,"script, "],[-1,""],[0,""],[1,"much "],[0,"shorter,"]],"start1":4565,"start2":4565,"length1":16,"length2":21},{"diffs":[[0,"     }\r\n"],[-1,"        this.end\r\n"],[0,"      })"]],"start1":5355,"start2":5355,"length1":34,"length2":16},{"diffs":[[0,", content}\r\n"],[-1,"      @end\r\n"],[0,"    @final -"]],"start1":5639,"start2":5639,"length1":36,"length2":24},{"diffs":[[0,"url in urls ){\r\n"],[1,"          (function( url ){\r\n  "],[0,"          this.s"]],"start1":5887,"start2":5887,"length1":32,"length2":63},{"diffs":[[0,"p( function(){\r\n"],[1,"  "],[0,"            fetc"]],"start1":5952,"start2":5952,"length1":32,"length2":34},{"diffs":[[0,"\r\n              "],[1,"  "],[0,"result.push({ ur"]],"start1":6030,"start2":6030,"length1":32,"length2":34},{"diffs":[[0,"nt: content })\r\n"],[1,"  "],[0,"            }))\r"]],"start1":6087,"start2":6087,"length1":32,"length2":34},{"diffs":[[0," }))\r\n          "],[1,"  "],[0,"})\r\n        }\r\n "]],"start1":6116,"start2":6116,"length1":32,"length2":34},{"diffs":[[0,"    })\r\n        "],[-1,"}"],[1,"  })( url )"],[0,"\r\n        this.e"]],"start1":6130,"start2":6130,"length1":33,"length2":43},{"diffs":[[0,"    "],[-1,"this.end"],[1,"}"],[0,"\r\n  "]],"start1":6163,"start2":6163,"length1":16,"length2":9},{"diffs":[[0,"or url in urls\r\n"],[1,"        do (url) ->\r\n  "],[0,"        @step ->"]],"start1":6341,"start2":6341,"length1":32,"length2":55},{"diffs":[[0,"t}\r\n"],[-1,"      @end\r\n"],[0,"    "]],"start1":6446,"start2":6446,"length1":20,"length2":8}]],"length":8626,"saved":false}
{"ts":1351084081388,"patch":[[{"diffs":[[0,"gs to a "],[-1,"Task"],[1,"Path"],[0,". Task c"]],"start1":8567,"start2":8567,"length1":20,"length2":20},{"diffs":[[0,"ooperate"],[1," across multiple paths"],[0,".\r\n"]],"start1":8615,"start2":8615,"length1":11,"length2":33}]],"length":8648,"saved":false}
{"ts":1351084606502,"patch":[[{"diffs":[[0,"ple paths.\r\n"],[1,"\r\nExample\r\n\r\nMainTask\r\n  Task.1\r\n    MainPath.1.1\r\n      Step.1.1.1\r\n      Step.1.1.2\r\n      RepeatStep.1.1.3\r\n  Task.2\r\n    MainPath.2.1\r\n      Step.2.2.1\r\n    ForkedPath.2.2\r\n      Step.2.2.2\r\n  Task.3\r\n    MainPath.3.1\r\n      Step.3.1.1\r\n        SubTask.3.1.1.1\r\n          MainPath.3.1.1.1.1\r\n            Step.3.1.1.1.1.1\r\n        SubTask.3.1.1.2\r\n          MainPath.3.1.1.2.1\r\n            Step.3.1.1.2.1.1\r\n\r\n"]],"start1":8636,"start2":8636,"length1":12,"length2":425}]],"length":9061,"saved":false}
{"ts":1351084849326,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"N"],[1,"Executable n"],[0,"odes"]],"start1":8449,"start2":8449,"length1":9,"length2":20},{"diffs":[[0,"lest non"],[-1," "],[1,"\r\n"],[0,"interrup"]],"start1":8518,"start2":8518,"length1":17,"length2":18},{"diffs":[[0,"ruptible"],[-1,"\r\n"],[1," "],[0,"executab"]],"start1":8533,"start2":8533,"length1":18,"length2":17},{"diffs":[[0,"Task can"],[-1," "],[1,"\r\n"],[0,"involve "]],"start1":8592,"start2":8592,"length1":17,"length2":18},{"diffs":[[0,"ub tasks"],[-1,"\r\n"],[1," "],[0,"that coo"]],"start1":8611,"start2":8611,"length1":18,"length2":17},{"diffs":[[0,"  Task.1"],[1," - a task with a single path made of three steps"],[0,"\r\n    Ma"]],"start1":8682,"start2":8682,"length1":16,"length2":64},{"diffs":[[0,"  Task.2"],[-1,""],[0,""],[1," - a task with two paths"],[0,"\r\n    Ma"]],"start1":8818,"start2":8818,"length1":16,"length2":40},{"diffs":[[0,"  Task.3"],[-1,""],[0,""],[1," - a task with two sub tasks"],[0,"\r\n    Ma"]],"start1":8926,"start2":8926,"length1":16,"length2":44}]],"length":9172,"saved":false}
{"ts":1351084986560,"patch":[[{"diffs":[[0,"MainPath"],[-1,".1.1"],[0,"\r\n      "]],"start1":8744,"start2":8744,"length1":20,"length2":16},{"diffs":[[0,"    Step"],[-1,".1.1.1"],[0,"\r\n      "]],"start1":8756,"start2":8756,"length1":22,"length2":16},{"diffs":[[0,"    Step"],[-1,".1.1.2"],[0,"\r\n      "]],"start1":8768,"start2":8768,"length1":22,"length2":16},{"diffs":[[0,"Step"],[-1,".2.2.1"],[1,"\r\n      Step"],[0,"\r\n  "]],"start1":8860,"start2":8860,"length1":14,"length2":20},{"diffs":[[0,"Step"],[-1,".2.2.2"],[0,"\r\n  "]],"start1":8904,"start2":8904,"length1":14,"length2":8},{"diffs":[[0,"MainPath"],[-1,".3.1"],[0,"\r\n      "]],"start1":8952,"start2":8952,"length1":20,"length2":16},{"diffs":[[0,"    Step"],[-1,".3.1.1"],[0,"\r\n      "]],"start1":8964,"start2":8964,"length1":22,"length2":16},{"diffs":[[0," SubTask"],[-1,".3.1.1.1"],[0,"\r\n      "]],"start1":8981,"start2":8981,"length1":24,"length2":16},{"diffs":[[0,"MainPath"],[-1,".3.1.1.1.1"],[0,"\r\n      "]],"start1":9001,"start2":9001,"length1":26,"length2":16},{"diffs":[[0,"Step"],[-1,".3.1.1.1.1.1"],[0,"\r\n  "]],"start1":9023,"start2":9023,"length1":20,"length2":8},{"diffs":[[0," SubTask"],[-1,".3.1.1.2"],[0,"\r\n      "]],"start1":9036,"start2":9036,"length1":24,"length2":16},{"diffs":[[0,"MainPath"],[-1,".3.1.1.2.1"],[0,"\r\n      "]],"start1":9056,"start2":9056,"length1":26,"length2":16},{"diffs":[[0,"Step"],[-1,".3.1.1.2.1.1"],[0,"\r\n\r\n"]],"start1":9078,"start2":9078,"length1":20,"length2":8}]],"length":9086,"saved":false}
{"ts":1351085125200,"patch":[[{"diffs":[[0,"le paths"],[1," to do our tasks"],[0,"\"\r\n\r\nSch"]],"start1":107,"start2":107,"length1":16,"length2":32}]],"length":9102,"saved":false}
{"ts":1351085346845,"patch":[[{"diffs":[[0,"ath "],[-1,"made of three steps"],[1,"with a loop"],[0,"\r\n  "]],"start1":8731,"start2":8731,"length1":27,"length2":19},{"diffs":[[0,"Step"],[-1,".1.1.3"],[1,"\r\n        Step\r\n        Step\r\n      Step"],[0,"\r\n  "]],"start1":8798,"start2":8798,"length1":14,"length2":48},{"diffs":[[0,"ith two "],[1,"simple "],[0,"sub task"]],"start1":8971,"start2":8971,"length1":16,"length2":23}]],"length":9135,"saved":false}
{"ts":1351085358525,"patch":[[{"diffs":[[0,"\nExample"],[1,":"],[0,"\r\n\r\nMain"]],"start1":8676,"start2":8676,"length1":16,"length2":17}]],"length":9136,"saved":false}
{"ts":1351085832084,"patch":[[{"diffs":[[0,"ple:\r\n\r\n"],[1,"```\r\n"],[0,"MainTask"]],"start1":8681,"start2":8681,"length1":16,"length2":21},{"diffs":[[0,"  Step\r\n"],[1,"```\r\n\r\n"],[0,"\r\n"]],"start1":9131,"start2":9131,"length1":10,"length2":17}]],"length":9148,"saved":false}
{"ts":1351085872272,"patch":[[{"diffs":[[0,"Path"],[-1,".2.1"],[0,"\r\n  "]],"start1":8892,"start2":8892,"length1":12,"length2":8},{"diffs":[[0,"Path"],[-1,".2.2"],[0,"\r\n  "]],"start1":8932,"start2":8932,"length1":12,"length2":8}]],"length":9140,"saved":false}
{"ts":1351086470372,"patch":[[{"diffs":[[0,"._return"],[-1,"         "],[1,"( [val] )"],[0,"   -- li"]],"start1":1542,"start2":1542,"length1":25,"length2":25},{"diffs":[[0,"@fork ->"],[-1,"\r\n   "],[0," http.ge"]],"start1":7374,"start2":7374,"length1":21,"length2":16},{"diffs":[[0,".co.uk\","],[1,"\r\n     "],[0," @walk ("]],"start1":7408,"start2":7408,"length1":16,"length2":23},{"diffs":[[0,"item) ->"],[-1,"\r\n     "],[1," @return"],[0," news = "]],"start1":7435,"start2":7435,"length1":23,"length2":24},{"diffs":[[0,"= item\r\n"],[-1,"      @_return\r\n"],[0,"  @fork "]],"start1":7457,"start2":7457,"length1":32,"length2":16},{"diffs":[[0,"@step ->"],[-1,"\r\n     "],[0," http.ge"]],"start1":7507,"start2":7507,"length1":23,"length2":16},{"diffs":[[0,"nn.com\","],[1,"\r\n      "],[0," @walk ("]],"start1":7539,"start2":7539,"length1":16,"length2":24},{"diffs":[[0,"tem ) ->"],[-1,"\r\n       "],[1," @return"],[0," news = "]],"start1":7569,"start2":7569,"length1":25,"length2":24},{"diffs":[[0,"em\r\n"],[-1,"        @_return\r\n"],[0,"  @f"]],"start1":7595,"start2":7595,"length1":26,"length2":8}]],"length":9109,"saved":false}
{"ts":1351086642810,"patch":[[{"diffs":[[0,"ised error\r\n"],[1,"    .result             -- \"return\" value of task, see _return\r\n"],[0,"    .timeout"]],"start1":3198,"start2":3198,"length1":24,"length2":88}]],"length":9173,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351089882630,"patch":[[{"diffs":[[0,"vascript"],[1,"/coffeescript/livescript...\r\n\r\n\"Let's walk these steps"],[0," on mult"]],"start1":35,"start2":35,"length1":16,"length2":70},{"diffs":[[0,"ur tasks"],[1,"\""],[0,"\r\n\r\nSche"]],"start1":123,"start2":123,"length1":16,"length2":17},{"diffs":[[0,"\r\n\r\n"],[-1,"  l8.begin              -- enter new scope\r\n    .scope( function )  -- return the L8 scope guarded version of a function"],[1,"l8 paths are a kind of user level non preemptive threads. They are neither\r\nnative threads, nor worker threads, nor fibers nor the result of some CPS\r\ntransformation. Just a bunch of cooperating closures.\r\n\r\nAPI\r\n---\r\n\r\n```\r\n  l8.begin              -- enter new L8 scope\r\n    .step( block )      -- queue a new step"],[0,"\r\n    ."],[-1,"step"],[1,"fork"],[0,"( bl"]],"start1":727,"start2":727,"length1":139,"length2":334},{"diffs":[[0,"e a new step"],[1," on a new parallel path"],[0,"\r\n    .walk("]],"start1":1079,"start2":1079,"length1":24,"length2":47},{"diffs":[[0,"st once "],[-1,"by"],[1,"per"],[0," step\r\n "]],"start1":1173,"start2":1173,"length1":18,"length2":19},{"diffs":[[0,"loop"],[1," step"],[0,"\r\n    ."],[-1,"restart  "],[1,"_continue"],[0,"    "]],"start1":1391,"start2":1391,"length1":24,"length2":29},{"diffs":[[0,"oops"],[-1," step"],[0,"\r\n    ."],[-1,"exit  "],[1,"_break"],[0,"    "]],"start1":1460,"start2":1460,"length1":26,"length2":21},{"diffs":[[0,"  --"],[-1," like"],[0," \"break\""],[-1,", exit"],[1," for"],[0," blo"]],"start1":1488,"start2":1488,"length1":27,"length2":20},{"diffs":[[0,"loop"],[-1," or task\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state  ( [val] )   -- return state of task, I->[Q|R]*->C/E/D\r\n    .raise( error )     -- raise an error in task"],[1,"s and forked steps\r\n    ._return( [val] )   -- like \"return\" in normal flow\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( blk [, q] ) -- start a new sub task, maybe suspended\r\n    .then( ... )        -- Promise/A protocol, tasks are promises\r\n    .success( block )   -- block to run when task is done without error\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done or step walked"],[0,"\r\n    ."],[-1,"spawn"],[1,"final"],[0,"( bl"]],"start1":1514,"start2":1514,"length1":342,"length2":505},{"diffs":[[0," -- "],[-1,"starts a new sub task\r\n    .queue()            -- schedule a new sub"],[1,"block to run when task is all done\r\n    .l8                 -- return global L8 object\r\n    .task               -- return current"],[0," tas"]],"start1":2028,"start2":2028,"length1":76,"length2":137},{"diffs":[[0,"k\r\n    ."],[-1,"cancel"],[1,"parent"],[0,"        "]],"start1":2165,"start2":2165,"length1":22,"length2":22},{"diffs":[[0," -- "],[-1,"cancel task & its sub tasks, brutal"],[1,"return parent task\r\n    .tasks              -- return sub tasks"],[0,"\r\n    ."],[-1,"s"],[0,"top "]],"start1":2191,"start2":2191,"length1":51,"length2":78},{"diffs":[[0,"    "],[1," "],[0,"-- "],[-1,"gentle cancel\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .delay( milli )     -- block for a while, then reschedule step\r\n    .wait( lock )       -- queue step until some lock opens, then retry"],[1,"return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .suspend            -- queue step, waiting until task is resumed\r\n    .waiting            -- true if task waiting while running (ie is queued)"],[0,"\r\n  "]],"start1":2279,"start2":2279,"length1":225,"length2":254},{"diffs":[[0,"p\r\n    ."],[-1,"stopp"],[1,"runn"],[0,"ing     "]],"start1":2604,"start2":2604,"length1":21,"length2":20},{"diffs":[[0,"    "],[1," "],[0,"-- true "],[-1,"after a gentle cancel, until task is done"],[1,"if task not done nor waiting"],[0,"\r\n    ."],[-1,"failed"],[1,"cancel"],[0,"    "]],"start1":2626,"start2":2626,"length1":70,"length2":58},{"diffs":[[0," -- "],[-1,"true if task done but with an error"],[1,"cancel task & its sub tasks, brutal"],[0,"\r\n    ."],[-1,"suc"],[1,"can"],[0,"ce"],[1,"l"],[0,"ed  "]],"start1":2692,"start2":2692,"length1":55,"length2":56},{"diffs":[[0,"celed           "],[-1," "],[0,"-- true if task "]],"start1":2741,"start2":2741,"length1":33,"length2":32},{"diffs":[[0,"ask "],[-1,"done without error"],[1,"was canceled"],[0,"\r\n    ."],[-1,"done"],[1,"stop"],[0,"    "]],"start1":2769,"start2":2769,"length1":37,"length2":31},{"diffs":[[0," -- "],[-1,"true if task done, else it either wait or runs"],[1,"gentle cancel"],[0,"\r\n    ."],[-1,"runn"],[1,"stopp"],[0,"ing "]],"start1":2810,"start2":2810,"length1":65,"length2":33},{"diffs":[[0,"        "],[-1," "],[0,"-- true "],[-1,"if"],[1,"after a gentle cancel, until"],[0," task "],[-1,"not"],[1,"is"],[0," done\r\n "]],"start1":2845,"start2":2845,"length1":36,"length2":60},{"diffs":[[0," done\r\n    ."],[-1,"waiting"],[1,"stopped"],[0,"            "]],"start1":2897,"start2":2897,"length1":31,"length2":31},{"diffs":[[0,"k wa"],[-1,"iting while running (ie is queued"],[1,"s gently canceled (gracefull"],[0,")\r\n    ."],[-1,"err"],[1,"done"],[0,"    "]],"start1":2942,"start2":2942,"length1":52,"length2":48},{"diffs":[[0,"    "],[-1," "],[0,"-- "],[-1,"returns last raised error"],[1,"true if task done, else it either waits or runs"],[0,"\r\n    ."],[-1,"can"],[1,"suc"],[0,"ce"],[-1,"l"],[0,"ed  "]],"start1":2997,"start2":2997,"length1":50,"length2":70},{"diffs":[[0,"cceed           "],[1," "],[0,"-- true if task "]],"start1":3060,"start2":3060,"length1":32,"length2":33},{"diffs":[[0,"ask "],[-1,"was canceled\r\n    .stopped            -- true if task was gently canceled (gracefull)"],[1,"done without error\r\n    .fail               -- true if task done but with an error"],[0,"\r\n    ."],[-1,"l8 "],[1,"err"],[0,"    "]],"start1":3089,"start2":3089,"length1":103,"length2":100},{"diffs":[[0,"urn "],[-1,"global L8 object\r\n    .then( ... )        -- Promise/A protocol\r\n    .error( block )     -- block to run when"],[1,"last raised error\r\n    .result             -- \"return\" value of task, see _return\r\n    .timeout( milli )   -- cancel"],[0," task i"],[-1,"s"],[1,"f not"],[0," done "],[-1,"but with error\r\n    .progress( block )  -- block to run when some task is done"],[1,"in time\r\n    .sleep( milli )     -- block for a while, then reschedule task"],[0,"\r\n    ."],[-1,"final"],[1,"wait"],[0,"( "],[-1,"b"],[0,"lock"]],"start1":3207,"start2":3207,"length1":224,"length2":230},{"diffs":[[0,"    "],[1," "],[1," "],[0,"-- "],[-1,"block to run when task is all done"],[1,"queue step until some lock opens, then retry"],[0,"\r\n  "]],"start1":3440,"start2":3440,"length1":45,"length2":57},{"diffs":[[0,"loop"],[-1,", return"],[1,"\r\n    .scope( function )  -- return the L8 scope guarded version of a function\r\n\r\n  These methods, if invoked against the global L8 object, will get forwarded\r\n  to the"],[0," cur"]],"start1":3537,"start2":3537,"length1":16,"length2":176},{"diffs":[[0,"ent task"],[1,".\r\n```"],[0,"\r\n\r\nTBD:"]],"start1":3714,"start2":3714,"length1":16,"length2":22},{"diffs":[[0,"aphores,"],[1," mutexes,"],[0," locks, "]],"start1":3740,"start2":3740,"length1":16,"length2":25},{"diffs":[[0,"--------\r\n\r\n"],[1,"Two steps.\r\n\r\n````\r\n"],[0,"  function f"]],"start1":3810,"start2":3810,"length1":24,"length2":44},{"diffs":[[0,"ult_b = "],[1,"{content:"],[0,"null"],[1,"}"],[0,"\r\n    //"]],"start1":3929,"start2":3929,"length1":20,"length2":30},{"diffs":[[0,"lt_b"],[1,".content"],[0,") })"],[-1," "],[0,"\r\n  "]],"start1":4625,"start2":4625,"length1":13,"length2":20},{"diffs":[[0," .end}\r\n"],[-1,"  \r\n  "],[1,"```\r\n\r\n"],[0,"Coffeesc"]],"start1":4644,"start2":4644,"length1":22,"length2":23},{"diffs":[[0,"escript,"],[1," much"],[0," shorter"]],"start1":4664,"start2":4664,"length1":16,"length2":21},{"diffs":[[0,"functor\r"],[1,"\n\r\n```\r"],[0,"\n  fetch"]],"start1":4710,"start2":4710,"length1":16,"length2":23},{"diffs":[[0,"b = "],[-1,"undefined "],[1,"{content:null}"],[0,"\r\n  "]],"start1":4784,"start2":4784,"length1":18,"length2":22},{"diffs":[[0,"step  ->"],[-1,"\r\n     "],[0," @raise "]],"start1":4876,"start2":4876,"length1":23,"length2":16},{"diffs":[[0," r_a.err"],[-1,"\r\n"],[1," ;\\\r\n        "],[0,"      fe"]],"start1":4902,"start2":4902,"length1":18,"length2":29},{"diffs":[[0,"ontent\r\n"],[-1,"     \r\n"],[1,"```\r\n\r\nMultiple steps, dynamically created, run in parallel\r\n\r\n```"],[0,"\r\n  func"]],"start1":5010,"start2":5010,"length1":23,"length2":82},{"diffs":[[0," this.next\r\n"],[1,"          (function( url ){\r\n  "],[0,"          fe"]],"start1":5242,"start2":5242,"length1":24,"length2":55},{"diffs":[[0,"l, this."],[-1,"spawn"],[1,"walk"],[0,"( functi"]],"start1":5304,"start2":5304,"length1":21,"length2":20},{"diffs":[[0,"rr, content ){\r\n"],[1,"  "],[0,"            resu"]],"start1":5329,"start2":5329,"length1":32,"length2":34},{"diffs":[[0,"t })\r\n          "],[1,"  "],[0,"}))\r\n"],[1,"  "],[0,"        }\r\n     "]],"start1":5408,"start2":5408,"length1":37,"length2":41},{"diffs":[[0,"}))\r\n          }"],[1,")( url )"],[0,"\r\n        this.e"]],"start1":5426,"start2":5426,"length1":32,"length2":40},{"diffs":[[0,"    "],[-1,"this.end"],[1,"}"],[0,"\r\n  "]],"start1":5456,"start2":5456,"length1":16,"length2":9},{"diffs":[[0,"\n    .end\r\n  }\r\n"],[-1,"  "],[0,""],[1,""],[0,"\r\n  fetch_all = "]],"start1":5522,"start2":5522,"length1":34,"length2":32},{"diffs":[[0,"  result"],[-1,""],[0,""],[1,"s"],[0," = []\r\n "]],"start1":5586,"start2":5586,"length1":16,"length2":17},{"diffs":[[0,"       @next"],[1,"; do (url) ->"],[0,"\r\n        fe"]],"start1":5647,"start2":5647,"length1":24,"length2":37},{"diffs":[[0,"h url, @"],[-1,"spawn"],[1,"walk"],[0," (err, c"]],"start1":5686,"start2":5686,"length1":21,"length2":20},{"diffs":[[0,"tent) ->"],[-1,"\r\n         "],[0," result"],[1,"s"],[0,".push {u"]],"start1":5708,"start2":5708,"length1":34,"length2":24},{"diffs":[[0,"t}\r\n"],[-1,"      @end\r\n"],[0,"    "]],"start1":5747,"start2":5747,"length1":20,"length2":8},{"diffs":[[0,"ults"],[-1,"    \r\n        \r\n"],[1,"\r\n```\r\n\r\nMultiple steps, dynamically created, run sequentially\r\n\r\n```"],[0,"\r\n  "]],"start1":5777,"start2":5777,"length1":24,"length2":77},{"diffs":[[0,"url in urls ){\r\n"],[1,"          (function( url ){\r\n  "],[0,"          this.s"]],"start1":5987,"start2":5987,"length1":32,"length2":63},{"diffs":[[0,"p( function(){\r\n"],[1,"  "],[0,"            fetc"]],"start1":6052,"start2":6052,"length1":32,"length2":34},{"diffs":[[0,"\r\n              "],[1," "],[1," "],[0,"result.push({ ur"]],"start1":6130,"start2":6130,"length1":32,"length2":34},{"diffs":[[0,"})\r\n            "],[1,"  "],[0,"}))\r\n"],[1,"  "],[0,"          })\r\n  "]],"start1":6199,"start2":6199,"length1":37,"length2":41},{"diffs":[[0,"        })\r\n"],[1,"          })( url )\r\n"],[0,"        }\r\n "]],"start1":6226,"start2":6226,"length1":24,"length2":45},{"diffs":[[0,"d\r\n  }\r\n"],[-1,"  "],[0,"\r\n  fetc"]],"start1":6337,"start2":6337,"length1":18,"length2":16},{"diffs":[[0,"callback"],[-1," "],[0,") ->\r\n  "]],"start1":6381,"start2":6381,"length1":17,"length2":16},{"diffs":[[0,"or url in urls\r\n"],[1,"        do (url) ->\r\n  "],[0,"        @step ->"]],"start1":6441,"start2":6441,"length1":32,"length2":55},{"diffs":[[0,"esults\r\n"],[1,"```"],[0,"\r\n\r\n"],[1,"Repeated step, externally terminated, gently\r\n\r\n```\r\n"],[0,"  spider"]],"start1":6574,"start2":6574,"length1":20,"length2":76},{"diffs":[[0,".scope ("],[-1," "],[0,"urls"],[-1," "],[0,") ->\r\n  "]],"start1":6655,"start2":6655,"length1":22,"length2":20},{"diffs":[[0,"@repeat ->\r\n"],[1,"      url = null\r\n"],[0,"      @step "]],"start1":6695,"start2":6695,"length1":24,"length2":42},{"diffs":[[0,"-> @"],[-1,"wait 10000 if @parent.tasks.length > 10\r\n      @step ->\r\n        @exit if @stopping   \r\n        fetch url, @walk (err,urls) ->\r\n          return if err\r\n          for url in urls\r\n        do (url) ->\r\n            (function( url ){\r\n              })( url )        queue.unshift url unless url in queue\r\n   \r\n  stop_spider -> spider.stop\r\n  "],[1,"delay 10000 if @parent.tasks.length > 10\r\n      @step ->\r\n        @_break if @stopping\r\n        fetch url, @walk (err,urls) ->\r\n          return if err or @stopping\r\n          for url in urls\r\n            queue.unshift url unless url in queue\r\n\r\n  spider_task = l8.spawn -> spider( \"http://xxx.com\")\r\n  ...\r\n  stop_spider = -> spider_task.stop\r\n```\r\n\r\nStratifiedJs example, see http://onilabs.com/stratifiedjs\r\n\r\n```\r\nvar news;\r\nwaitfor {\r\n  news = http.get(\"http://news.bbc.co.uk\");\r\n}\r\nor {\r\n  hold(1000);\r\n  news = http.get(\"http://news.cnn.com\");\r\n}\r\nor {\r\n  hold(1000*60);\r\n  throw \"sorry, no news. timeout\";\r\n}\r\nshow(news);\r\n```\r\n```\r\nshow_news = l8.scope ->\r\n  news = null\r\n  @fork -> http.get \"http://news.bbc.co.uk\",\r\n      @walk (err,item) -> @return news = item\r\n  @fork ->\r\n    @step -> @sleep 1000\r\n    @step -> http.get \"http://news.cnn.com\",\r\n       @walk (err, item ) -> @return news = item\r\n  @fork ->\r\n    @step -> @sleep 1000 * 60\r\n    @step -> throw \"sorry, no news. timeout\"\r\n  @success -> show news\r\n\r\n```\r\n\r\n\r\n\r\nDesign\r\n------\r\n\r\nThe key idea is to break a javascript function into \"steps\" and then walk thru\r\nthese steps much like the javascript interpreter runs thru the statements\r\nof a function. This is quite verbose however. But not so much when using\r\nCoffeeScript. This is why, after considering the idea years ago, I waited\r\nuntil now to implement it. That my cousin Jean Vincent would consider breaking\r\na function into steps as something close enough to threading was another strong\r\nmotivator.\r\n\r\nTo break functions into steps, I use a DSL (domain specific language) API.\r\nOnce the AST (abstact syntax tree) is built, I interpret it.\r\n\r\nThis becomes really interesting when the AST gets dynamically modified!\r\n\r\nExecutable nodes in the AST are called \"steps\". They are the smallest non\r\ninterruptible executable entities. Each Step belongs to a Path. Task can\r\ninvolve sub tasks that cooperate across multiple paths.\r\n\r\nExample:\r\n\r\n```\r\nMainTask\r\n  Task.1 - a task with a single path with a loop\r\n    MainPath\r\n      Step\r\n      Step\r\n      RepeatStep\r\n        Step\r\n        Step\r\n      Step\r\n  Task.2 - a task with two paths\r\n    MainPath\r\n      Step\r\n      Step\r\n    ForkedPath\r\n      Step\r\n  Task.3 - a task with two simple sub tasks\r\n    MainPath\r\n      Step\r\n        SubTask\r\n          MainPath\r\n            Step\r\n        SubTask\r\n          MainPath\r\n            Step\r\n```\r\n\r\n\r\n"]],"start1":6771,"start2":6771,"length1":343,"length2":2422}]],"length":9193,"saved":false}
{"ts":1351090764793,"patch":[[{"diffs":[[0,"ths are "],[-1,"a "],[0,"kind of "]],"start1":736,"start2":736,"length1":18,"length2":16},{"diffs":[[0,"e a new step"],[1," on the path to task's completion"],[0,"\r\n    .fork("]],"start1":1032,"start2":1032,"length1":24,"length2":57}]],"length":9224,"saved":false}
{"ts":1351090799971,"patch":[[{"diffs":[[0,"l8"],[-1,"\r\n"],[1," 0.1\r\n===="],[0,"==\r\n\r\nLi"]],"start1":0,"start2":0,"length1":12,"length2":20}]],"length":9232,"saved":false}
{"ts":1351090820261,"patch":[[{"diffs":[[0,"l8 0.1"],[-1,"\r\n"],[1,".1\r\n=="],[0,"======\r\n"]],"start1":0,"start2":0,"length1":16,"length2":20}]],"length":9236,"saved":false}
{"ts":1351091535186,"patch":[[{"diffs":[[0,"       @"],[-1,"_"],[0,"break if"]],"start1":6877,"start2":6877,"length1":17,"length2":16}]],"length":9235,"saved":false}
{"ts":1351091847200,"patch":[[{"diffs":[[0,"his.next"],[-1,"\r\n         "],[1,";"],[0," (functi"]],"start1":5287,"start2":5287,"length1":27,"length2":17}]],"length":9225,"saved":false}
{"ts":1351094300069,"patch":[[{"diffs":[[0,"s\r\n    ."],[-1,"next"],[1,"each"],[0,"        "]],"start1":1310,"start2":1310,"length1":20,"length2":20},{"diffs":[[0,"   this."],[-1,"next"],[1,"each"],[0,"; (funct"]],"start1":5283,"start2":5283,"length1":20,"length2":20},{"diffs":[[0,"       @"],[-1,"next"],[1,"each"],[0,"; do (ur"]],"start1":5680,"start2":5680,"length1":20,"length2":20}]],"length":9225,"saved":false}
{"ts":1351115188586,"patch":[[{"diffs":[[0,"   Step\r\n```\r\n\r\n"],[1,"Extensions\r\n----------\r\n\r\nThe l8 API defines a concept of Task/Path/Step entities that works nicely in\r\nthe async/callback dominated world of Javascript and yet manage to provide some\r\nuseful tools (hopefully) to address the infamous \"callback hell\" issue.\r\n\r\nHowever these tool are very basic. Suspend/Resume are building blocks only.\r\n\r\nWhat is also needed is more sophisticated yet simpler to use solutions. There\r\nare many style of coding regarding the orchestration of complex interactions\r\nbetween fragments on code. Were are no longer restricted to the signal/kill\r\nmechanism from the 70s in Unix!\r\n\r\nIn addition to the classics (semaphores, mutexes, message queues, conditional\r\nvariables, signals, events...) newer mechanisms are experimented or\r\nrediscovered. Things like channels in Go, actors in Erlang, reactive system in\r\nAngular, these things are interesting to explore.\r\n\r\nI believe l8 may help do that. Sure the granularity is not the same as in\r\nnative implementations. Instead of dealing with statements or even machine\r\ncode level instructions, l8 deals with much bigger \"steps\". However, regarding\r\nsynchronisation, this difference of scale does not imply a difference of\r\nnature. As a consequence, solutions that work at the machine level may prove\r\nalso productive at the \"step\" higher level. l8 makes it possible to use these\r\nsolutions in Javascript, today (well... in a few months, if things go well).\r\n\r\nProposal for extensions are welcome. Let's get to paradize ;)\r\n\r\nEnjoys.\r\n\r\n   Jean Hugues Robert, aka @jhr, october 2012.\r\n\r\n\r\n"],[0,"\r\n"]],"start1":9207,"start2":9207,"length1":18,"length2":1577}]],"length":10784,"saved":false}
{"ts":1351115236866,"patch":[[{"diffs":[[0,"Proposal"],[1,"s"],[0," for ext"]],"start1":10654,"start2":10654,"length1":16,"length2":17}]],"length":10785,"saved":false}
{"ts":1351121460370,"patch":[[{"diffs":[[0,"is resumed\r\n"],[1,"    .yield( value )     -- like \"suspend\" but provide a value and returns one\r\n"],[0,"    .waiting"]],"start1":2484,"start2":2484,"length1":24,"length2":103},{"diffs":[[0," some step\r\n"],[1,"    .yield( value )     -- like \"suspend\" but provides a value and returns one\r\n    .run( value )       -- like \"resume\" but provides a value and returs one\r\n"],[0,"    .running"]],"start1":2717,"start2":2717,"length1":24,"length2":182},{"diffs":[[0," _return"],[1," and yield()"],[0,"\r\n    .t"]],"start1":3564,"start2":3564,"length1":16,"length2":28}]],"length":11034,"saved":false}
{"ts":1351123568819,"patch":[[{"diffs":[[0,", maybe "],[-1,"suspend"],[1,"paus"],[0,"ed\r\n    "]],"start1":1736,"start2":1736,"length1":23,"length2":20},{"diffs":[[0,"D\r\n    ."],[-1,"suspend"],[1,"pause  "],[0,"        "]],"start1":2420,"start2":2420,"length1":23,"length2":23},{"diffs":[[0,"ed\r\n"],[-1,"    .yield( value )     -- like \"suspend\" but provide a value and returns one\r\n"],[0,"    "]],"start1":2489,"start2":2489,"length1":87,"length2":8},{"diffs":[[0,"ke \""],[-1,"suspend"],[1,"pause"],[0,"\" bu"]],"start1":2676,"start2":2676,"length1":15,"length2":13},{"diffs":[[0,"nd retur"],[1,"n"],[0,"s one\r\n "]],"start1":2788,"start2":2788,"length1":16,"length2":17},{"diffs":[[0,"ic. "],[-1,"Suspend"],[1,"Pause"],[0,"/Res"]],"start1":9680,"start2":9680,"length1":15,"length2":13}]],"length":10949,"saved":false}
{"ts":1351127445627,"patch":[[{"diffs":[[0,".\r\n\r\nl8 "],[-1,"path"],[1,"task"],[0,"s are ki"]],"start1":738,"start2":738,"length1":20,"length2":20}]],"length":10949,"saved":false}
{"ts":1351128071057,"patch":[[{"diffs":[[0,"er 2012.\r\n\r\n"],[1,"PS: all this stuff is to relieve my \"node anxiety\".\r\nSee http://news.ycombinator.com/item?id=2371152\r\n\r\n"],[0,"\r\n\r\n"]],"start1":10933,"start2":10933,"length1":16,"length2":120}]],"length":11053,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352113978207,"patch":[[{"diffs":[[0,"\n```\r\n\r\n"],[1,"Adding steps\r\n------------\r\n\r\nExecution goes \"step by step\" until task completion. Steps to execute are\r\nqueued. When a new step is created, it is usually added at the end of the queue\r\nfor the currenty executing task. Sometimes however, one wants to queue new\r\nsteps right after the currently executing step. This is typically the case\r\nwhen a step needs to schedule work for multiple items. Such \"steps\" are either\r\nsequential steps or steps to walk on parallel sub-pathes.\r\n\r\nTo insert a new step before the one next to the currently executing step, use\r\nstep().\r\n\r\nTo insert a new step on a new parallel sub-path, use either loop()/each() or\r\npath().\r\n\r\nTo insert multiple sub-steps, use begin/end around them. This is equivalent\r\nto calling a sub-routine. Something that can also be done with call(), it will\r\nadd begin/end as well. Such steps are actually run in a new sub-task.\r\n\r\nIn all these case, the current step won't be considered complete until all\r\nthese additionnal step are completed themselves.\r\n\r\nTo insert steps that won't block the current step, use spawn() instead. Such\r\nsteps are also run in a new task but the current step is not blocked until\r\nthe new task is complete.\r\n\r\n"],[0,"Extensio"]],"start1":9381,"start2":9381,"length1":16,"length2":1215}]],"length":12252,"saved":false}
{"ts":1352115360403,"patch":[[{"diffs":[[0,"nd paths"],[1," (sub-tasks)"],[0," can nes"]],"start1":310,"start2":310,"length1":16,"length2":28},{"diffs":[[0,"tatements.\r\n"],[-1,""],[0,"\r\nExecution "]],"start1":362,"start2":362,"length1":24,"length2":24},{"diffs":[[0,"allel path\r\n"],[1,"    .call( block )      -- like fork() but waits until other path completes\r\n"],[0,"    .walk( b"]],"start1":1159,"start2":1159,"length1":24,"length2":101},{"diffs":[[0,"lly created,"],[1," each"],[0," run in para"]],"start1":5347,"start2":5347,"length1":24,"length2":29},{"diffs":[[0,"``\r\n"],[-1,"  function fetch_all_seq( urls, callback ){\r\n    var results = []\r\n    l8.begin\r\n      .step( function(){\r\n        this.loop; for( var url in urls ){\r\n          (function( url ){\r\n            this.step( function(){\r\n              fetch( url, this.walk( function( err, content ){\r\n                result.push({ url: url, err: err, content: content })\r\n              }))\r\n            })\r\n          })( url )\r\n        }\r\n      })\r\n      .final( function(){ callback( results ) })\r\n    .end\r\n  }\r\n\r\n"],[0,"  fe"]],"start1":6141,"start2":6141,"length1":503,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"This becomes really interesting when the AST gets dynamically modified!\r\n\r\n"],[0,"Exec"]],"start1":8240,"start2":8240,"length1":83,"length2":8},{"diffs":[[0,"e paths.\r\n\r\n"],[1,"This becomes really interesting when the AST gets dynamically modified! This\r\nhappens when a step decides that is requires additional sub steps to complete.\r\n\r\nOn a path, execution goes from step to step. When a step involves sub-steps,\r\nthe step is blocked until the sub-steps complete unless sub-steps are created\r\nin a forked parallel path (sub-task).\r\n\r\n"],[0,"Example:\r\n\r\n"]],"start1":8440,"start2":8440,"length1":24,"length2":382},{"diffs":[[0,"h() "],[-1,"or\r\npath()"],[1,"and\r\nthen step() or just path(). Such steps block the current step until they are\r\ncompleted. If multiple loops are nested, use end() to close a nesting level"],[0,".\r\n\r"]],"start1":9910,"start2":9910,"length1":18,"length2":166}]],"length":12282,"saved":false}
{"ts":1352116453327,"patch":[[{"diffs":[[0,"wo paths"],[1," (two sub tasks)"],[0,"\r\n"],[-1,""],[0,"    Main"]],"start1":9007,"start2":9007,"length1":18,"length2":34},{"diffs":[[0,"ep\r\n"],[-1,"  Task.3 - a task with two simple sub tasks\r\n    MainPath\r\n      Step\r\n        SubTask\r\n          MainPath\r\n            Step\r\n        SubTask\r\n          MainPath\r\n            Step\r\n"],[0,"```\r"]],"start1":9095,"start2":9095,"length1":189,"length2":8},{"diffs":[[0,"-pathes."],[1," It also happens when\r\na step requires additional sub-steps to complete."],[0,"\r\n\r\nTo i"]],"start1":9573,"start2":9573,"length1":16,"length2":88},{"diffs":[[0,"\nstep()."],[1," Such steps are run once the current step is completed."],[0,"\r\n\r\nTo i"]],"start1":9735,"start2":9735,"length1":16,"length2":71},{"diffs":[[0," until\r\n"],[-1,""],[0,"the new "]],"start1":10543,"start2":10543,"length1":16,"length2":16},{"diffs":[[0,"ete.\r\n\r\n"],[1,"Blocking\r\n--------\r\n\r\nSteps are useful to describe flows that depends on other flows. As a result\r\na step often describes sub-steps and/or sub pathes/tasks. These steps then\r\n\"block\" waiting for the sub items to complete.\r\n\r\nFor simple steps, that only depends on the completion of a simple asynchronous\r\naction, walk() provides the callback to register with that action. When the\r\ncallback is called, flows walks from the current step to the next.\r\n\r\nHowever, if the action's result dictates that some new \"nested\" steps are\r\nrequired, one call add new steps from within the callback itself. This style\r\nof programming is not adviced because it basically resolves back to the\r\ninfamous \"callback hell\" that l8 attemps to avoid. A better solution is to\r\nset some variable inside the callback and let the next step handle that.\r\n\r\n"],[0,"Extensio"]],"start1":10572,"start2":10572,"length1":16,"length2":846}]],"length":13074,"saved":false}
{"ts":1352117300824,"patch":[[{"diffs":[[0,"one "],[-1,"call "],[0,"add "]],"start1":11117,"start2":11117,"length1":13,"length2":8},{"diffs":[[0," style\r\n"],[1,""],[0,"of progr"]],"start1":11172,"start2":11172,"length1":16,"length2":16},{"diffs":[[0," is to\r\n"],[-1,""],[0,"set some"]],"start1":11321,"start2":11321,"length1":16,"length2":16},{"diffs":[[0,"hat.\r\n\r\n"],[1,"Do:\r\n  result = undefined\r\n  @step -> fetch @walk (r) -> result = r\r\n  @step -> if result then more_fetch @walk (r) -> result = r\r\n  @step -> if result then fetch_again @walk (r) -> result = r\r\n  @step -> if result then use( result)\r\n  @step -> done()\r\n\r\nDon't:\r\n  @step -> fetch @walk (result) ->\r\n    if result\r\n      more_fetch @walk (result) ->\r\n        if result\r\n          fetch_again @walk (result) ->\r\n            if r then use( result)\r\n  @step -> done()\r\n\r\n"],[0,"Extensio"]],"start1":11397,"start2":11397,"length1":16,"length2":483}]],"length":13536,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352189070477,"patch":[[{"diffs":[[0,"l8 0.1."],[-1,"1"],[1,"2"],[0,"\r\n======"]],"start1":0,"start2":0,"length1":16,"length2":16},{"diffs":[[0,"``\r\n"],[-1,"  function fetch_all( urls, callback ){\r\n    var results = []\r\n    l8.begin\r\n      .step( function(){\r\n        this.loop; for( var url in urls ){\r\n          this.each; (function( url ){\r\n            fetch( url, this.walk( function( err, content ){\r\n              result.push({ url: url, err: err, content: content })\r\n            }))\r\n          })( url )\r\n        }\r\n      })\r\n      .final( function(){ callback( results ) })\r\n    .end\r\n  }\r\n\r\n"],[0,"  fe"]],"start1":5385,"start2":5385,"length1":452,"length2":8},{"diffs":[[0,"    if r"],[1,"esult"],[0," then us"]],"start1":11379,"start2":11379,"length1":16,"length2":21}]],"length":13097,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352286048264,"patch":[[{"diffs":[[0,"====\r\n\r\n"],[-1,"L"],[1,"A l"],[0,"ight tas"]],"start1":14,"start2":14,"length1":17,"length2":19},{"diffs":[[0,"\r\n\r\n"],[-1,"S"],[1,"What is it?\r\n===========\r\n\r\nIt s"],[0,"chedule"],[1,"s"],[0," the"]],"start1":146,"start2":146,"length1":16,"length2":48},{"diffs":[[0,"losures."],[-1,""],[0,""],[1,"\r\n\r\nSteps vs Statements\r\n===================\r\n\r\nJavascript code is made of statements (and expressions). One key characteristic\r\nof the language is the fact that all these statements are \"non blocking\". This\r\nmeans that no statements can \"block\". They are executed with no delay, they\r\ncannot \"wait\" for something to happen.\r\n\r\nAs a result there is only one \"thread\" of execution and any activity that\r\ncannot complete immediately needs to register code to excute later when\r\nsome \"event\" occurs. This single thread runs a tight loop that consumes events\r\nand run code registered to handle them. This is \"the event loop\"\r\n\r\n  while( true ){\r\n    event = get_event()\r\n    dispatch( event)\r\n  }\r\n\r\nCode that is executed when an event happens is often named \"callback\". This is\r\nbecause it is the \"event loop\" (though \"dispatch()\") that \"calls\" that code.\r\n\r\n  function process_mouse_over(){\r\n    obj.onmouseover = call_me_back;\r\n    function call_me_back(){\r\n      // called when mouse runs over that obj\r\n    }\r\n  }\r\n\r\nThat event_loop/callback style is simple and efficient. However, it has some\r\nnotorious drawbacks. Things can get fairly complex to handle when some activity\r\ninvolve many sub-activities that must be run in some specific order.\r\n\r\nMultiple solutions exist to care with such cases. The most basic one is to\r\nstart a new activity from within the callback that gets called when the\r\nprevious activity is completed.\r\n\r\n  ajax_get_user( name, function user_found( user ){\r\n    ajax_check_credential( user, function credential_checked( is_ok ){\r\n      if( is_ok ){\r\n        ajax_do_action( user, \"delete\", function delete_result( err ){\r\n          if( err ) signal( err)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\nThis code is not very readable because of the \"nesting\" of the different parts\r\nthat obscure it.\r\n\r\n  ajax_get_user( name, user_found);\r\n  function user_found( user ){\r\n    ajax_check_credential( user, credential_checked);\r\n  }\r\n  function credential_checked( is_ok ){\r\n    if( !is_ok )return\r\n    ajax_do_action( user, \"delete\", delete_result)\r\n  }\r\n  function delete_result( err ){\r\n    if( err ) signal( err)\r\n  }\r\n\r\nThis slightly different style is barely more readable. What would be readable\r\nis something like this:\r\n\r\n  user = ajax_get_user()\r\n  if( !ajax_check_credential( user) )return\r\n  if( err = ajax_do_action( user, \"delete\") ){\r\n    signal( err)\r\n  }\r\n\r\nHowever, this cannot exist in javascript because no function can \"block\". The\r\nfunction \"ajax_get_user()\" cannot \"block\" until it receives an answer.\r\n\r\nThis is where L8 helps.\r\n\r\n  l8.step( function(){ ajax_get_user( l8.walk()) })\r\n  l8.step( function(){ ajax_check_credential( user = l8.result, l8.walk()) })\r\n  l8.step( function(){ if( !l8.result ) l8._return();\r\n                       ajax_do_action( user, l8.walk() })\r\n  l8.step( function(){ if( l8.result )\r\n"],[0,"\r\n\r\nAPI\r"]],"start1":983,"start2":983,"length1":16,"length2":2870}]],"length":15985,"saved":false}
{"ts":1352286575548,"patch":[[{"diffs":[[0,"et_user("],[1," name"],[0,")\r\n"],[-1,""],[0,"  if( !a"]],"start1":3250,"start2":3250,"length1":19,"length2":24},{"diffs":[[0,"lps.\r\n\r\n  l8"],[1,"\r\n  "],[0,".step( funct"]],"start1":3556,"start2":3556,"length1":24,"length2":28},{"diffs":[[0,"et_user("],[1," name,                    "],[0," l8.walk"]],"start1":3597,"start2":3597,"length1":16,"length2":42},{"diffs":[[0,"8.walk()) })\r\n  "],[-1,"l8"],[0,".step( function("]],"start1":3633,"start2":3633,"length1":34,"length2":32},{"diffs":[[0,"8.walk()) })\r\n  "],[-1,"l8"],[0,".step( function("]],"start1":3710,"start2":3710,"length1":34,"length2":32},{"diffs":[[0,"            "],[-1,"  "],[0,"ajax_do_acti"]],"start1":3786,"start2":3786,"length1":26,"length2":24},{"diffs":[[0,"n( user,"],[1," \"delete\",         "],[0," l8.walk"]],"start1":3811,"start2":3811,"length1":16,"length2":35},{"diffs":[[0,"lk()"],[1," "],[0," })\r\n  "],[-1,"l8"],[0,".ste"]],"start1":3844,"start2":3844,"length1":17,"length2":16},{"diffs":[[0,"result )"],[-1,"\r\n"],[1," signal( l8.result)                  })\r\n\r\nThis is less verbose with CoffeeScript:\r\n\r\n  @step -> ajax_get_user name,                     @walk()\r\n  @step -> ajax_check_credential (user = @result), @walk()\r\n  @step -> if !@result then @return\r\n           ajax_do_action user, \"delete\",          @walk()\r\n  @step -> if @result then signal @result\r\n\r\nBy \"breaking\" a function into multiple \"steps\", code become almost as readable\r\nas it would be if statements in javascript could block."],[0,"\r\n\r\nAPI\r"]],"start1":3882,"start2":3882,"length1":18,"length2":499}]],"length":16513,"saved":false}
{"ts":1352286938998,"patch":[[{"diffs":[[0,"ock.\r\n\r\n"],[1,"This example is a fairly simple one. Execution goes from step to step in a\r\nsequential way. Sometimes the flow of control can be much more sophisticated.\r\nThere can be multiple \"threads\" of control, with actions initiated concurrently\r\nwith various style of collaboration between these actions.\r\n\r\nHence the notion of \"task\". A Task is a L8 object that consolidates the result\r\nof multiple threads of control (aka sub-tasks) that all participate in the\r\ncompletion of the task.\r\n\r\n"],[0,"API\r\n---"]],"start1":4369,"start2":4369,"length1":16,"length2":497}]],"length":16994,"saved":false}
{"ts":1352287213647,"patch":[[{"diffs":[[0," a\r\nstep"],[1," immediatly"],[0,", one ca"]],"start1":483,"start2":483,"length1":16,"length2":27},{"diffs":[[0," one can"],[1," block,"],[0," wait"],[1,"ing"],[0," for som"]],"start1":503,"start2":503,"length1":21,"length2":31},{"diffs":[[0,"ing "],[-1,"and maybe retry later"],[1,"before resuming"],[0,".\r\n\r"]],"start1":537,"start2":537,"length1":29,"length2":23},{"diffs":[[0,"tatement"],[-1,"s"],[0," can \"bl"]],"start1":1230,"start2":1230,"length1":17,"length2":16},{"diffs":[[0,"de to ex"],[1,"e"],[0,"cute lat"]],"start1":1456,"start2":1456,"length1":16,"length2":17},{"diffs":[[0,"tion of "],[-1,"the"],[1,"a"],[0," task.\r\n"]],"start1":4852,"start2":4852,"length1":19,"length2":17}]],"length":17007,"saved":false}
{"ts":1352287412914,"patch":[[{"diffs":[[0,"b-task).\r\n\r\n"],[1,"Note: a \"path\" is, at the step level, what is usually called a \"thread\" (or a\r\nfiber\") in languages that support this notion at the statement/expression\r\nlevel.\r\n\r\n"],[0,"Example:\r\n\r\n"]],"start1":12264,"start2":12264,"length1":24,"length2":188}]],"length":17171,"saved":false}
{"ts":1352295557532,"patch":[[{"diffs":[[0,"aths\".\r\n"],[-1,"T"],[1,"Such t"],[0,"asks and"]],"start1":329,"start2":329,"length1":17,"length2":22},{"diffs":[[0,"         l8."],[-1,"walk()"],[1,"next"],[0,") })\r\n  .ste"]],"start1":3643,"start2":3643,"length1":30,"length2":28},{"diffs":[[0,"ult, l8."],[-1,"walk()"],[1,"next"],[0,") })\r\n  "]],"start1":3722,"start2":3722,"length1":22,"length2":20},{"diffs":[[0,"     l8."],[-1,"walk() "],[1,"next)"],[0," })\r\n  ."]],"start1":3850,"start2":3850,"length1":23,"length2":21},{"diffs":[[0,"            "],[-1," "],[-1," "],[0,"})\r\n\r\nThis i"]],"start1":3927,"start2":3927,"length1":26,"length2":24},{"diffs":[[0,"               @"],[-1,"walk()"],[1,"next"],[0,"\r\n  @step -> aja"]],"start1":4024,"start2":4024,"length1":38,"length2":36},{"diffs":[[0,"sult), @"],[-1,"walk()"],[1,"next"],[0,"\r\n  @ste"]],"start1":4090,"start2":4090,"length1":22,"length2":20},{"diffs":[[0,"then @return"],[1,"()              ;\\"],[0,"\r\n          "]],"start1":4127,"start2":4127,"length1":24,"length2":42},{"diffs":[[0,"       @"],[-1,"walk()"],[1,"next"],[0,"\r\n  @ste"]],"start1":4203,"start2":4203,"length1":22,"length2":20},{"diffs":[[0,"ep -> if"],[1," err ="],[0," @result"]],"start1":4222,"start2":4222,"length1":16,"length2":22},{"diffs":[[0," signal "],[-1,"@result"],[1,"err"],[0,"\r\n\r\nBy \""]],"start1":4249,"start2":4249,"length1":23,"length2":19},{"diffs":[[0,"ld block"],[1,", minus the step/next\r\nnoise"],[0,".\r\n\r\nThi"]],"start1":4390,"start2":4390,"length1":16,"length2":44},{"diffs":[[0,"e per step\r\n"],[1,"    .next               -- alias for walk() -- ie no block parameter\r\n"],[0,"    .loop   "]],"start1":5260,"start2":5260,"length1":24,"length2":94},{"diffs":[[0,"synchron"],[-1,"e"],[1,"ous"],[0," version"]],"start1":8290,"start2":8290,"length1":17,"length2":19},{"diffs":[[0,"``\r\n\r\nCoffee"],[-1,"s"],[1,"S"],[0,"cript, much "]],"start1":8972,"start2":8972,"length1":25,"length2":25},{"diffs":[[0,"complete"],[-1,""],[0,""],[1,","],[0," unless "]],"start1":12307,"start2":12307,"length1":16,"length2":17},{"diffs":[[0,"\na step "],[-1,""],[0,""],[1,"discovers that it "],[0,"requires"]],"start1":13345,"start2":13345,"length1":16,"length2":34},{"diffs":[[0,"ese case"],[-1,""],[0,""],[1,"s"],[0,", the cu"]],"start1":14038,"start2":14038,"length1":16,"length2":17},{"diffs":[[0,"he next.\r\n\r\n"],[1,"Note: in the frequent case where the callback only needs to store the result\r\nof the asychronous operation and move forward to the next step, please use\r\n\"next\" instead of walk( function( x ){ this.result = x }).\r\n\r\n"],[0,"However, if "]],"start1":14781,"start2":14781,"length1":24,"length2":240},{"diffs":[[0,"itself. "],[-1,"T"],[1,"Often, t"],[0,"his styl"]],"start1":15137,"start2":15137,"length1":17,"length2":24},{"diffs":[[0,"to\r\n"],[-1,"set some variable inside the callback and let the next step handle that.\r\n\r\nDo:\r\n  result = undefined\r\n  @step -> fetch @walk (r) -> result = r"],[1,"let the next step handle that.\r\n\r\nDo:\r\n  @step -> fetch                       @next"],[0,"\r\n  "]],"start1":15309,"start2":15309,"length1":151,"length2":91},{"diffs":[[0,"\r\n  @step -> if "],[1,"@"],[0,"result then more"]],"start1":15396,"start2":15396,"length1":32,"length2":33},{"diffs":[[0,"e_fetch "],[-1,"@walk (r) -> result = r"],[1," @next"],[0,"\r\n  @ste"]],"start1":15428,"start2":15428,"length1":39,"length2":22},{"diffs":[[0,"\r\n  @step -> if "],[1,"@"],[0,"result then fetc"]],"start1":15442,"start2":15442,"length1":32,"length2":33},{"diffs":[[0,"in @"],[-1,"walk (r) -> result = r"],[1,"next"],[0,"\r\n  "]],"start1":15480,"start2":15480,"length1":30,"length2":12},{"diffs":[[0,"@step -> if "],[1,"@"],[0,"result then "]],"start1":15492,"start2":15492,"length1":24,"length2":25},{"diffs":[[0,"ult then use"],[-1,"("],[0," "],[1,"@"],[0,"result"],[-1,")"],[0,"\r\n  @step ->"]],"start1":15508,"start2":15508,"length1":33,"length2":32},{"diffs":[[0," use"],[-1,"("],[0," result"],[-1,")"],[0,"\r\n  "]],"start1":15732,"start2":15732,"length1":17,"length2":15},{"diffs":[[0,"ome."],[-1," Let's get to paradize ;)"],[0,"\r\n\r\n"]],"start1":17228,"start2":17228,"length1":33,"length2":8},{"diffs":[[0,"\n\r\nEnjoy"],[-1,"s"],[0,".\r\n\r\n   "]],"start1":17233,"start2":17233,"length1":17,"length2":16},{"diffs":[[0," october"],[1,"/november"],[0," 2012.\r\n"]],"start1":17278,"start2":17278,"length1":16,"length2":25}]],"length":17413,"saved":false}
{"ts":1352331470692,"patch":[[{"diffs":[[0,"oop\"\r\n\r\n"],[1,"```\r\n"],[0,"  while("]],"start1":1627,"start2":1627,"length1":16,"length2":21},{"diffs":[[0,"_event()"],[1,";"],[0,"\r\n    di"]],"start1":1673,"start2":1673,"length1":16,"length2":17},{"diffs":[[0,"( event)"],[1,";"],[0,"\r\n  }\r"],[1,"\n```\r"],[0,"\n\r\nCode "]],"start1":1696,"start2":1696,"length1":22,"length2":28},{"diffs":[[0,"ode.\r\n\r\n"],[1,"```\r\n"],[0,"  functi"]],"start1":1871,"start2":1871,"length1":16,"length2":21},{"diffs":[[0,"\n    }\r\n  }\r"],[1,"\n```\r"],[0,"\n\r\nThat even"]],"start1":2031,"start2":2031,"length1":24,"length2":29},{"diffs":[[0,"mpleted.\r\n\r\n"],[1,"```\r\n"],[0,"  ajax_get_u"]],"start1":2454,"start2":2454,"length1":24,"length2":29},{"diffs":[[0,"\n    }\r\n  }\r"],[1,"\n```\r"],[0,"\n\r\nThis code"]],"start1":2741,"start2":2741,"length1":24,"length2":29},{"diffs":[[0," it.\r\n\r\n"],[1,"```\r\n"],[0,"  ajax_g"]],"start1":2853,"start2":2853,"length1":16,"length2":21},{"diffs":[[0,"r)\r\n  }\r"],[1,"\n```\r"],[0,"\n\r\nThis "]],"start1":3175,"start2":3175,"length1":16,"length2":21},{"diffs":[[0,"his:\r\n\r\n"],[1,"```\r\n"],[0,"  user ="]],"start1":3289,"start2":3289,"length1":16,"length2":21},{"diffs":[[0,"r)\r\n  }\r"],[1,"\n```\r"],[0,"\n\r\nHowev"]],"start1":3440,"start2":3440,"length1":16,"length2":21},{"diffs":[[0,"lps.\r\n\r\n"],[1,"```\r\n"],[0,"  l8\r\n  "]],"start1":3628,"start2":3628,"length1":16,"length2":21},{"diffs":[[0,"     })\r"],[1,"\n```\r"],[0,"\n\r\nThis "]],"start1":3991,"start2":3991,"length1":16,"length2":21},{"diffs":[[0,"ipt:\r\n\r\n"],[1,"```\r\n"],[0,"  @step "]],"start1":4042,"start2":4042,"length1":16,"length2":21},{"diffs":[[0,"gnal err"],[-1,""],[0,""],[1,"\r\n```"],[0,"\r\n\r\nBy \""]],"start1":4319,"start2":4319,"length1":16,"length2":21}]],"length":17485,"saved":false}
