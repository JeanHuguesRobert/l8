{"ts":1351140228955,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// l8.js\r\n//   Task manager\r\n//   https://github.com/JeanHuguesRobert/l8\r\n//\r\n// 2012/10/24, JHR, create\r\n\r\nvar L8 = null\r\n\r\nfunction Task( parent ){\r\n  this.isRoot = false\r\n  this.parent = parent\r\n  this.tasks  = []\r\n  this.beginStack = []\r\n  this.firstStep = null\r\n  this.lastStep  = null\r\n}\r\nTask.prototype = Task\r\n\r\nL8 = new Task( null )\r\nL8.isRoot = true\r\n\r\nCurrentStep = null\r\n\r\nfunction Step( task, parent, previous, block ){\r\n  this.task   = task\r\n  this.parent = parent\r\n  this.block  = block\r\n  if( !previous ){\r\n    this.previous  = null\r\n    this.next      = null\r\n    task.firstStep = task.lastStep = this\r\n  }else if( !previous.next ){\r\n    this.previous  = previous\r\n    this.previous.next = this\r\n    this.next     = null\r\n    task.lastStep = this\r\n  }else{\r\n    this.previous = previous\r\n    this.next     = previous.next\r\n    this.previous.next = this\r\n  }\r\n}\r\nStep.prototype = Step\r\n\r\nTask.__defineGetter__( \"begin\", function(){\r\n  CurrentStep.task.beginStack.push( CurrentStep)\r\n  return this\r\n})\r\n\r\n\r\n\r\n  l8.begin              -- enter new L8 scope\r\n    .step( block )      -- queue a new step on the path to task's completion\r\n    .fork( block )      -- queue a new step on a new parallel path\r\n    .walk( block )      -- walk a step on its path, at most once per step\r\n    .loop               -- enter a non blocking loop, made of iterative steps\r\n    .each               -- enter next iteration step in a non blocking loop\r\n    .repeat( block )    -- queue a blocking loop step\r\n    ._continue          -- like \"continue\", for blocking loops\r\n    ._break             -- \"break\" for blocking loops and forked steps\r\n    ._return( [val] )   -- like \"return\" in normal flow\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( blk [, q] ) -- start a new sub task, maybe paused\r\n    .then( ... )        -- Promise/A protocol, tasks are promises\r\n    .success( block )   -- block to run when task is done without error\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done or step walked\r\n    .final( block )     -- block to run when task is all done\r\n    .l8                 -- return global L8 object\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .pause              -- queue step, waiting until task is resumed\r\n    .waiting            -- true if task waiting while running (ie is queued)\r\n    .resume             -- resume execution of a task waiting at some step\r\n    .yield( value )     -- like \"pause\" but provides a value and returns one\r\n    .run( value )       -- like \"resume\" but provides a value and returns one\r\n    .running            -- true if task not done nor waiting\r\n    .cancel             -- cancel task & its sub tasks, brutal\r\n    .canceled           -- true if task was canceled\r\n    .stop               -- gentle cancel\r\n    .stopping           -- true after a gentle cancel, until task is done\r\n    .stopped            -- true if task was gently canceled (gracefull)\r\n    .done               -- true if task done, else it either waits or runs\r\n    .succeed            -- true if task done without error\r\n    .fail               -- true if task done but with an error\r\n    .err                -- return last raised error\r\n    .result             -- \"return\" value of task, see _return and yield()\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .sleep( milli )     -- block for a while, then reschedule task\r\n    .wait( lock )       -- queue step until some lock opens, then retry\r\n    .end                -- leave scope or loop\r\n    .scope( function )  -- return the L8 scope guarded version of a function"]],"start1":0,"start2":0,"length1":0,"length2":3886}]],"length":3886}
{"contributors":[],"silentsave":false,"ts":1351140227455,"patch":[[{"diffs":[[1,"// l8.js\r\n//   Task manager\r\n//   https://github.com/JeanHuguesRobert/l8\r\n//\r\n// 2012/10/24, JHR, create\r\n\r\nvar L8 = null\r\n\r\nfunction Task( parent ){\r\n  this.isRoot = false\r\n  this.parent = parent\r\n  this.tasks  = []\r\n  this.beginStack = []\r\n  this.firstStep = null\r\n  this.lastStep  = null\r\n}\r\nTask.prototype = Task\r\n\r\nL8 = new Task( null )\r\nL8.isRoot = true\r\n\r\nCurrentStep = null\r\n\r\nfunction Step( task, parent, previous, block ){\r\n  this.task   = task\r\n  this.parent = parent\r\n  this.block  = block\r\n  if( !previous ){\r\n    this.previous  = null\r\n    this.next      = null\r\n    task.firstStep = task.lastStep = this\r\n  }else if( !previous.next ){\r\n    this.previous  = previous\r\n    this.previous.next = this\r\n    this.next     = null\r\n    task.lastStep = this\r\n  }else{\r\n    this.previous = previous\r\n    this.next     = previous.next\r\n    this.previous.next = this\r\n  }\r\n}\r\nStep.prototype = Step\r\n\r\nTask.__defineGetter__( \"begin\", function(){\r\n  CurrentStep.task.beginStack.push( CurrentStep)\r\n  return this\r\n})\r\n\r\n\r\n\r\n  l8.begin              -- enter new L8 scope\r\n    .step( block )      -- queue a new step on the path to task's completion\r\n    .fork( block )      -- queue a new step on a new parallel path\r\n    .walk( block )      -- walk a step on its path, at most once per step\r\n    .loop               -- enter a non blocking loop, made of iterative steps\r\n    .each               -- enter next iteration step in a non blocking loop\r\n    .repeat( block )    -- queue a blocking loop step\r\n    ._continue          -- like \"continue\", for blocking loops\r\n    ._break             -- \"break\" for blocking loops and forked steps\r\n    ._return( [val] )   -- like \"return\" in normal flow\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( blk [, q] ) -- start a new sub task, maybe paused\r\n    .then( ... )        -- Promise/A protocol, tasks are promises\r\n    .success( block )   -- block to run when task is done without error\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done or step walked\r\n    .final( block )     -- block to run when task is all done\r\n    .l8                 -- return global L8 object\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .pause              -- queue step, waiting until task is resumed\r\n    .waiting            -- true if task waiting while running (ie is queued)\r\n    .resume             -- resume execution of a task waiting at some step\r\n    .yield( value )     -- like \"pause\" but provides a value and returns one\r\n    .run( value )       -- like \"resume\" but provides a value and returns one\r\n    .running            -- true if task not done nor waiting\r\n    .cancel             -- cancel task & its sub tasks, brutal\r\n    .canceled           -- true if task was canceled\r\n    .stop               -- gentle cancel\r\n    .stopping           -- true after a gentle cancel, until task is done\r\n    .stopped            -- true if task was gently canceled (gracefull)\r\n    .done               -- true if task done, else it either waits or runs\r\n    .succeed            -- true if task done without error\r\n    .fail               -- true if task done but with an error\r\n    .err                -- return last raised error\r\n    .result             -- \"return\" value of task, see _return and yield()\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .sleep( milli )     -- block for a while, then reschedule task\r\n    .wait( lock )       -- queue step until some lock opens, then retry\r\n    .end                -- leave scope or loop\r\n    .scope( function )  -- return the L8 scope guarded version of a function"]],"start1":0,"start2":0,"length1":0,"length2":3886}]],"length":3886,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351140636840,"patch":[[{"diffs":[[0,"ush( CurrentStep"],[1," "],[0,")\r\n"],[-1,""],[0,"  return this\r\n}"]],"start1":980,"start2":980,"length1":35,"length2":36},{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\r\n  l8.begin              -- enter new L8 scope\r\n    .step( block )      -- queue a new step on the path to task's completion\r\n    .fork( block )      -- queue a new step on a new parallel path\r\n    .walk( block )      -- walk a step on its path, at most once per step\r\n    .loop               -- enter a non blocking loop, made of iterative steps\r\n    .each               -- enter next iteration step in a non blocking loop\r\n    .repeat( block )    -- queue a blocking loop step\r\n    ._continue          -- like \"continue\", for blocking loops\r\n    ._break             -- \"break\" for blocking loops and forked steps\r\n    ._return( [val] )   -- like \"return\" in normal flow\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( blk [, q] ) -- start a new sub task, maybe paused\r\n    .then( ... )        -- Promise/A protocol, tasks are promises\r\n    .success( block )   -- block to run when task is done without error\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done or step walked\r\n    .final( block )     -- block to run when task is all done\r\n    .l8                 -- return global L8 object\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .pause              -- queue step, waiting until task is resumed\r\n    .waiting            -- true if task waiting while running (ie is queued)\r\n    .resume             -- resume execution of a task waiting at some step\r\n    .yield( value )     -- like \"pause\" but provides a value and returns one\r\n    .run( value )       -- like \"resume\" but provides a value and returns one\r\n    .running            -- true if task not done nor waiting\r\n    .cancel             -- cancel task & its sub tasks, brutal\r\n    .canceled           -- true if task was canceled\r\n    .stop               -- gentle cancel\r\n    .stopping           -- true after a gentle cancel, until task is done\r\n    .stopped            -- true if task was gently canceled (gracefull)\r\n    .done               -- true if task done, else it either waits or runs\r\n    .succeed            -- true if task done without error\r\n    .fail               -- true if task done but with an error\r\n    .err                -- return last raised error\r\n    .result             -- \"return\" value of task, see _return and yield()\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .sleep( milli )     -- block for a while, then reschedule task\r\n    .wait( lock )       -- queue step until some lock opens, then retry\r\n    .end                -- leave scope or loop\r\n    .scope( function )  -- return the L8 scope guarded version of a function// l8.js\r\n//   Task manager\r\n//   https://github.com/JeanHuguesRobert/l8\r\n//\r\n// 2012/10/24, JHR, create\r\n\r\nvar L8 = null\r\n\r\nfunction Task( parent ){\r\n  this.isRoot = false\r\n  this.parent = parent\r\n  this.tasks  = []\r\n  this.beginStack = []\r\n  this.firstStep = null\r\n  this.lastStep  = null\r\n}\r\nTask.prototype = Task\r\n\r\nL8 = new Task( null )\r\nL8.isRoot = true\r\n\r\nCurrentStep = null\r\n\r\nfunction Step( task, parent, previous, block ){\r\n  this.task   = task\r\n  this.parent = parent\r\n  this.block  = block\r\n  if( !previous ){\r\n    this.previous  = null\r\n    this.next      = null\r\n    task.firstStep = task.lastStep = this\r\n  }else if( !previous.next ){\r\n    this.previous  = previous\r\n    this.previous.next = this\r\n    this.next     = null\r\n    task.lastStep = this\r\n  }else{\r\n    this.previous = previous\r\n    this.next     = previous.next\r\n    this.previous.next = this\r\n  }\r\n}\r\nStep.prototype = Step\r\n\r\nTask.__defineGetter__( \"begin\", function(){\r\n  CurrentStep.task.beginStack.push( CurrentStep"],[1,"Task.step = function step( block ){\r\n  if( this.isRoot )return CurrentStep.task.step( block )\r\n  var step = new Step( this, CurrentStep.parent, this.lastStep, block"],[0,")\r\n "]],"start1":1017,"start2":1017,"length1":3870,"length2":172},{"diffs":[[0,"eturn this\r\n"],[1,""],[0,"}"],[-1,")"],[0,"\r\n\r\n\r\n\r\n  l8"]],"start1":1191,"start2":1191,"length1":26,"length2":25}]],"length":4074,"saved":false}
{"ts":1351141213032,"patch":[[{"diffs":[[0,".isRoot "],[1,"    "],[0,"= false\r"]],"start1":157,"start2":157,"length1":16,"length2":20},{"diffs":[[0,"e\r\n  this.parent"],[1,"Task"],[0," = parent\r\n  thi"]],"start1":175,"start2":175,"length1":32,"length2":36},{"diffs":[[0,"\r\n  "],[-1,"this.tasks"],[1,"if( parent ){\r\n    this.parentTask.subTasks.push( this)\r\n  }\r\n  this.subTasks "],[0,"  = "]],"start1":204,"start2":204,"length1":18,"length2":86},{"diffs":[[0,"s.firstStep "],[1," "],[0,"= null\r\n  th"]],"start1":323,"start2":323,"length1":24,"length2":25},{"diffs":[[0," this.lastStep  "],[1," "],[0,"= null\r\n}\r\nTask."]],"start1":345,"start2":345,"length1":32,"length2":33},{"diffs":[[0,"sk( null"],[-1," "],[0,""],[1,""],[0,")\r\nL8.is"]],"start1":409,"start2":409,"length1":17,"length2":16},{"diffs":[[0,"rentStep"],[-1," "],[0,")\r\n"],[1,""],[0,"  return"]],"start1":1065,"start2":1065,"length1":20,"length2":19},{"diffs":[[0,"p( block"],[-1," "],[0,")\r\n  var"]],"start1":1180,"start2":1180,"length1":17,"length2":16},{"diffs":[[0,"s\r\n}\r\n\r\n"],[1,"Task.fork = function fork( block ){\r\n  if( this.isRoot )return CurrentStep.task.fork( block)\r\n  var task = new Task( this.task)\r\n  return this\r\n}\r\n\r\n"],[0,"\r\n\r\n  l8"]],"start1":1275,"start2":1275,"length1":16,"length2":165}]],"length":4298,"saved":false}
{"ts":1351141366545,"patch":[[{"diffs":[[0,"this.task)\r\n"],[1,"  var step = new Step( task, CurrentStep, null, block)\r\n"],[0,"  return thi"]],"start1":1400,"start2":1400,"length1":24,"length2":80}]],"length":4354,"saved":false}
{"ts":1351142761506,"patch":[[{"diffs":[[0,"Tasks   "],[1," "],[0,"= []\r\n  "]],"start1":280,"start2":280,"length1":16,"length2":17},{"diffs":[[0,"inStack "],[1," "],[0,"= []\r\n  "]],"start1":305,"start2":305,"length1":16,"length2":17},{"diffs":[[0,"stStep  "],[1," "],[0,"= null\r\n"]],"start1":330,"start2":330,"length1":16,"length2":17},{"diffs":[[0,"tStep   "],[1," "],[0,"= null\r\n"],[1,"  this.currentStep = null\r\n  this.wasCanceled = false\r\n"],[0,"}\r\nTask."]],"start1":357,"start2":357,"length1":24,"length2":80},{"diffs":[[0," = true\r"],[1,"\nL8.stepQueue = []\r"],[0,"\n\r\nCurre"]],"start1":488,"start2":488,"length1":16,"length2":35},{"diffs":[[0,"tStep = null\r\n\r\n"],[1,"L8.scheduler = function scheduler(){\r\n  var step\r\n  while( step = this.stepQueue.shift() ){\r\n    step.scheduler()\r\n  }\r\n}\r\n\r\n"],[0,"function Step( t"]],"start1":524,"start2":524,"length1":32,"length2":157},{"diffs":[[0," task.lastStep ="],[1," task.currentStep ="],[0," this\r\n  }else i"]],"start1":877,"start2":877,"length1":32,"length2":51},{"diffs":[[0,"e = Step\r\n\r\n"],[1,"Step.scheduler = function step_scheduler(){\r\n\r\n}\r\n\r\n"],[0,"Task.__defin"]],"start1":1191,"start2":1191,"length1":24,"length2":76},{"diffs":[[0,", null, block)\r\n"],[-1,""],[0,"  return this\r\n}"]],"start1":1726,"start2":1726,"length1":32,"length2":32},{"diffs":[[0,"s\r\n}\r\n\r\n"],[1,"Task.walk = function walk( block ){\r\n  var step = CurrentStep\r\n  return function walk_cb(){\r\n     CurrentStep = step\r\n     block.apply( step.task, arguments)\r\n\r\n  }\r\n}\r\n\r\n"],[0,"\r\n\r\n  l8"]],"start1":1754,"start2":1754,"length1":16,"length2":187}]],"length":4799,"saved":false}
{"ts":1351143081860,"patch":[[{"diffs":[[0," false\r\n"],[1,"  this.isScheduled = false\r\n"],[0,"}\r\nTask."]],"start1":421,"start2":421,"length1":16,"length2":44},{"diffs":[[0,"ler(){\r\n"],[1,"  if( !this.isScheduled )return\r\n  try{\r\n    this.block()\r\n  }catch( e ){\r\n    throw e\r\n  }"],[0,"\r\n}\r\n\r\nT"]],"start1":1268,"start2":1268,"length1":16,"length2":107}]],"length":4918,"saved":false}
{"ts":1351143432702,"patch":[[{"diffs":[[0,"s.is"],[-1,"Scheduled = fals"],[1,"Running   = tru"],[0,"e\r\n}"]],"start1":434,"start2":434,"length1":24,"length2":23},{"diffs":[[0,"s.is"],[-1,"Scheduled )return"],[1,"Running )return\r\n  var step = CurrentStep\r\n  CurrentStep = this"],[0,"\r\n  "]],"start1":1285,"start2":1285,"length1":25,"length2":71},{"diffs":[[0,"hrow e\r\n"],[1,"  }finally{\r\n    CurrentStep = step\r\n"],[0,"  }\r\n}\r\n"]],"start1":1401,"start2":1401,"length1":16,"length2":53}]],"length":5000,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351169332003,"patch":[[{"diffs":[[1,"// l8.js\r\n//   Task manager\r\n//   https://github.com/JeanHuguesRobert/l8\r\n//\r\n// 2012/10/24, JHR, create\r\n\r\nvar L8 = null\r\nvar l8 = null\r\n\r\nvar Util = require( \"util\")\r\n\r\nfunction trace(){\r\n  var buf = [\"L8\"]\r\n  for( var item in arguments ){ buf.push( item)}\r\n  Util.puts( buf.join( \",\"))\r\n}\r\n\r\nfunction Task( parent ){\r\n  this.isRoot     = false\r\n  this.parentTask = parent\r\n  if( parent ){\r\n    this.parentTask.subTasks.push( this)\r\n  }\r\n  this.subTasks    = []\r\n  this.beginStack  = []\r\n  this.firstStep   = null\r\n  this.lastStep    = null\r\n  this.currentStep = null\r\n  this.wasCanceled = false\r\n  this.isRunning   = true\r\n}\r\nTask.prototype = Task\r\n\r\nL8 = l8 = new Task( null)\r\nL8.isRoot = true\r\nL8.stepQueue = []\r\nL8.isScheduled = false\r\n\r\nvar CurrentStep = null\r\n\r\nL8.scheduler = function scheduler(){\r\n  if( !L8.isScheduled ){\r\n    L8.isScheduled = true\r\n    process.nextTick( tick)\r\n    return L8\r\n  }\r\n  function tick(){\r\n    L8.isScheduled = false\r\n    var step\r\n    while( step = L8.stepQueue.shift() ){\r\n      step.scheduler()\r\n    }\r\n    L8.scheduler()\r\n  }\r\n}\r\n\r\nL8.enqueueStep = function( step ){\r\n  if( step.wasQueued )return\r\n  L8.stepQueue.push( step)\r\n  step.wasQueued = true\r\n  step.isRunning = true\r\n}\r\n\r\nfunction Step( task, parent, previous, block ){\r\n  this.task   = task\r\n  this.parent = parent\r\n  this.block  = block\r\n  if( !previous ){\r\n    this.previous  = null\r\n    this.next      = null\r\n    task.firstStep = task.lastStep = task.currentStep = this\r\n  }else if( !previous.next ){\r\n    this.previous  = previous\r\n    this.previous.next = this\r\n    this.next     = null\r\n    task.lastStep = this\r\n  }else{\r\n    this.previous = previous\r\n    this.next     = previous.next\r\n    this.previous.next = this\r\n  }\r\n  this.wasQueued = false\r\n  this.isRunning = false\r\n}\r\nStep.prototype = Step\r\n\r\nStep.scheduler = function step_scheduler(){\r\n  if( !this.wasQueued )return\r\n  this.wasQueued = false\r\n  if( !this.isRunning )return\r\n  var step = CurrentStep\r\n  CurrentStep = this\r\n  try{\r\n    this.block()\r\n  }catch( e ){\r\n    throw e\r\n  }finally{\r\n    CurrentStep = step\r\n    L8.scheduler()\r\n  }\r\n}\r\n\r\nTask.__defineGetter__( \"begin\", function(){\r\n  CurrentStep.task.beginStack.push( CurrentStep)\r\n  return this\r\n})\r\n\r\nTask.__defineGetter__( \"end\", function(){\r\n  var step  = CurrentStep\r\n  var task  = step.task\r\n  var stack = task.beginStack\r\n  var top   = stack[stack.length - 1]\r\n  if( top != step ){\r\n    throw \"Unbalanced L8.end\"\r\n  }\r\n  stack.pop()\r\n  return this\r\n}\r\n\r\nTask.step = function step( block ){\r\n  if( this.isRoot )return CurrentStep.task.step( block)\r\n  var step = new Step( this, CurrentStep.parent, this.lastStep, block)\r\n  return this\r\n}\r\n\r\nTask.fork = function fork( block ){\r\n  if( this.isRoot )return CurrentStep.task.fork( block)\r\n  var task = new Task( this.task)\r\n  var step = new Step( task, CurrentStep, null, block)\r\n  return this\r\n}\r\n\r\nTask.walk = function walk( block ){\r\n  var step = CurrentStep\r\n  return function walk_cb(){\r\n    var previous_step = CurrentStep\r\n    CurrentStep = step\r\n    try{\r\n      block.apply( step.task, arguments)\r\n    }catch( e ){\r\n      throw e\r\n    }finally{\r\n      CurrentStep = previous_step\r\n      if( step.isRunning ){\r\n        step.isRunning = false\r\n        var next_step = step.next\r\n        if( next_step ){\r\n          L8.enqueueStep( next_step)\r\n        }\r\n      }\r\n      L8.scheduler()\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n\r\n  l8.begin              -- enter new L8 scope\r\n    .step( block )      -- queue a new step on the path to task's completion\r\n    .fork( block )      -- queue a new step on a new parallel path\r\n    .walk( block )      -- walk a step on its path, at most once per step\r\n    .loop               -- enter a non blocking loop, made of iterative steps\r\n    .each               -- enter next iteration step in a non blocking loop\r\n    .repeat( block )    -- queue a blocking loop step\r\n    ._continue          -- like \"continue\", for blocking loops\r\n    ._break             -- \"break\" for blocking loops and forked steps\r\n    ._return( [val] )   -- like \"return\" in normal flow\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( blk [, q] ) -- start a new sub task, maybe paused\r\n    .then( ... )        -- Promise/A protocol, tasks are promises\r\n    .success( block )   -- block to run when task is done without error\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done or step walked\r\n    .final( block )     -- block to run when task is all done\r\n    .l8                 -- return global L8 object\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .pause              -- queue step, waiting until task is resumed\r\n    .waiting            -- true if task waiting while running (ie is queued)\r\n    .resume             -- resume execution of a task waiting at some step\r\n    .yield( value )     -- like \"pause\" but provides a value and returns one\r\n    .run( value )       -- like \"resume\" but provides a value and returns one\r\n    .running            -- true if task not done nor waiting\r\n    .cancel             -- cancel task & its sub tasks, brutal\r\n    .canceled           -- true if task was canceled\r\n    .stop               -- gentle cancel\r\n    .stopping           -- true after a gentle cancel, until task is done\r\n    .stopped            -- true if task was gently canceled (gracefull)\r\n    .done               -- true if task done, else it either waits or runs\r\n    .succeed            -- true if task done without error\r\n    .fail               -- true if task done but with an error\r\n    .err                -- return last raised error\r\n    .result             -- \"return\" value of task, see _return and yield()\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .sleep( milli )     -- block for a while, then reschedule task\r\n    .wait( lock )       -- queue step until some lock opens, then retry\r\n    .end                -- leave scope or loop\r\n    .scope( function )  -- return the L8 scope guarded version of a function\r\n\r\n    */\r\n\r\nfunction test_1(){\r\n  function t(){\r\n    var buf = [\"test_1\"]\r\n    for( item in argument ){buf.push( item)}\r\n    trace.apply( this, buf)\r\n  }\r\n  function task(){\r\n    l8.begin\r\n    .step( function(){ t( \"starts\")})\r\n    .step( function(){ t( \"step\")})\r\n    .end\r\n  }\r\n  L8.scheduler()\r\n}\r\n\r\ntrace( \"starting L8\")\r\nvar count_down = 5\r\nsetInterval(\r\n  function(){\r\n    trace( \"tick \" + count_down--)\r\n    if( !count_down){\r\n      process.exit( 0)\r\n    }\r\n  }\r\n  1000\r\n)\r\ntrace( \"done L8\")\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6761}]],"length":6761,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351169424099,"patch":[[{"diffs":[[0,"  return this\r\n}"],[1,")"],[0,"\r\n\r\nTask.step = "]],"start1":2472,"start2":2472,"length1":32,"length2":33}]],"length":6762,"saved":false}
{"ts":1351169460375,"patch":[[{"diffs":[[0,"    for("],[1," var"],[0," item in"]],"start1":6337,"start2":6337,"length1":16,"length2":20},{"diffs":[[0,"\r\n    }\r\n  }"],[1,","],[0,"\r\n  1000\r\n)\r"]],"start1":6722,"start2":6722,"length1":24,"length2":25}]],"length":6767,"saved":false}
{"ts":1351169754481,"patch":[[{"diffs":[[0,"ar i"],[-1,"tem in arguments ){ buf.push( item"],[1,"i = 0 ; ii < argumets.length ; ii++){ buf.push( arguments[ii]"],[0,")}\r\n"]],"start1":218,"start2":218,"length1":42,"length2":69}]],"length":6794,"saved":false}
{"ts":1351169774254,"patch":[[{"diffs":[[0,"< argume"],[1,"n"],[0,"ts.lengt"]],"start1":233,"start2":233,"length1":16,"length2":17}]],"length":6795,"saved":false}
{"ts":1351169832561,"patch":[[{"diffs":[[0,"join( \","],[1," "],[0,"\"))\r\n}\r\n"]],"start1":305,"start2":305,"length1":16,"length2":17},{"diffs":[[0,"ick \" + "],[1,"--"],[0,"count_do"]],"start1":6683,"start2":6683,"length1":16,"length2":18},{"diffs":[[0,"unt_down"],[-1,"--"],[0,")\r\n    i"]],"start1":6695,"start2":6695,"length1":18,"length2":16}]],"length":6796,"saved":false}
{"ts":1351170410929,"patch":[[{"diffs":[[0,"Step\r\n\r\n"],[1,"CurrentStep = new Step( L8, null, null, null)\r\n\r\n"],[0,"Step.sch"]],"start1":1836,"start2":1836,"length1":16,"length2":65},{"diffs":[[0,"\r\n    */\r\n\r\n"],[1,"L8.startup = function(){\r\n\r\n}\r\n\r\n"],[0,"function tes"]],"start1":6340,"start2":6340,"length1":24,"length2":57},{"diffs":[[0,"ar i"],[-1,"tem in argument ){"],[1,"i = 0 ; ii < arguments.length ; ii++ ) "],[0,"buf."]],"start1":6458,"start2":6458,"length1":26,"length2":47},{"diffs":[[0,"sh( "],[-1,"item)}"],[1,"arguments[ii])"],[0,"\r\n  "]],"start1":6507,"start2":6507,"length1":14,"length2":22},{"diffs":[[0,", buf)\r\n"],[-1,""],[0,"  }\r\n"],[1,"  t( \"starts\")\r\n"],[0,"  functi"]],"start1":6548,"start2":6548,"length1":21,"length2":37},{"diffs":[[0,"000\r\n)\r\n"],[1,"test_1\r\n"],[0,"trace( \""]],"start1":6896,"start2":6896,"length1":16,"length2":24}]],"length":6931,"saved":false}
{"ts":1351170509288,"patch":[[{"diffs":[[0,"\r\ntest_1"],[1,"()"],[0,"\r\ntrace("]],"start1":6902,"start2":6902,"length1":16,"length2":18}]],"length":6933,"saved":false}
{"ts":1351170555992,"patch":[[{"diffs":[[0,".begin\r\n    "],[1,"  "],[0,".step( funct"]],"start1":6603,"start2":6603,"length1":24,"length2":26},{"diffs":[[0,"starts\")})\r\n"],[1,"  "],[0,"    .step( f"]],"start1":6640,"start2":6640,"length1":24,"length2":26},{"diffs":[[0,"d\r\n  }\r\n"],[1,"  task()\r\n"],[0,"  L8.sch"]],"start1":6698,"start2":6698,"length1":16,"length2":26}]],"length":6947,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351170786635,"patch":[[{"diffs":[[0,"on task(){\r\n"],[1,"    t( \"task\")\r\n"],[0,"    l8.begin"]],"start1":6585,"start2":6585,"length1":24,"length2":40},{"diffs":[[0,".begin\r\n"],[-1,""],[0,"      .s"]],"start1":6619,"start2":6619,"length1":16,"length2":16},{"diffs":[[0,"task()\r\n"],[1,"  t( \"starts scheduler\")\r\n"],[0,"  L8.sch"]],"start1":6724,"start2":6724,"length1":16,"length2":42},{"diffs":[[0,"\")\r\n"],[-1,"// l8.js\r\n//   Task manager\r\n//   https://github.com/JeanHuguesRobert/l8\r\n//\r\n// 2012/10/24, JHR, create\r\n\r\nvar L8 = null\r\n\r\nfunction Task( parent ){\r\n  this.isRoot     = false\r\n  this.parentTask = parent\r\n  if( parent ){\r\n    this.parentTask.subTasks.push( this)\r\n  }\r\n  this.subTasks    = []\r\n  this.beginStack  = []\r\n  this.firstStep   = null\r\n  this.lastStep    = null\r\n  this.currentStep = null\r\n  this.wasCanceled = false\r\n  this.isRunning   = true\r\n}\r\nTask.prototype = Task\r\n\r\nL8 = new Task( null)\r\nL8.isRoot = true\r\nL8.stepQueue = []\r\n\r\nCurrentStep = null\r\n\r\nL8.scheduler = function scheduler(){\r\n  var step\r\n  while( step = this.stepQueue.shift() ){\r\n    step.scheduler()\r\n  }\r\n}\r\n\r\nfunction Step( task, parent, previous, block ){\r\n  this.task   = task\r\n  this.parent = parent\r\n  this.block  = block\r\n  if( !previous ){\r\n    this.previous  = null\r\n    this.next      = null\r\n    task.firstStep = task.lastStep = task.currentStep = this\r\n  }else if( !previous.next ){\r\n    this.previous  = previous\r\n    this.previous.next = this\r\n    this.next     = null\r\n    task.lastStep = this\r\n  }else{\r\n    this.previous = previous\r\n    this.next     = previous.next\r\n    this.previous.next = this\r\n  }\r\n}\r\nStep.prototype = Step\r\n\r\nStep.scheduler = function step_scheduler(){\r\n  if( !this.isRunning )return\r\n  var step = CurrentStep\r\n  CurrentStep = this\r\n  try{\r\n    this.block()\r\n  }catch( e ){\r\n    throw e\r\n  }finally{\r\n    CurrentStep = step\r\n  }\r\n}\r\n\r\nTask.__defineGetter__( \"begin\", function(){\r\n  CurrentStep.task.beginStack.push( CurrentStep)\r\n  return this\r\n})\r\n\r\nTask.step = function step( block ){\r\n  if( this.isRoot )return CurrentStep.task.step( block)\r\n  var step = new Step( this, CurrentStep.parent, this.lastStep, block)\r\n  return this\r\n}\r\n\r\nTask.fork = function fork( block ){\r\n  if( this.isRoot )return CurrentStep.task.fork( block)\r\n  var task = new Task( this.task)\r\n  var step = new Step( task, CurrentStep, null, block)\r\n  return this\r\n}\r\n\r\nTask.walk = function walk( block ){\r\n  var step = CurrentStep\r\n  return function walk_cb(){\r\n     CurrentStep = step\r\n     block.apply( step.task, arguments)\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n  l8.begin              -- enter new L8 scope\r\n    .step( block )      -- queue a new step on the path to task's completion\r\n    .fork( block )      -- queue a new step on a new parallel path\r\n    .walk( block )      -- walk a step on its path, at most once per step\r\n    .loop               -- enter a non blocking loop, made of iterative steps\r\n    .each               -- enter next iteration step in a non blocking loop\r\n    .repeat( block )    -- queue a blocking loop step\r\n    ._continue          -- like \"continue\", for blocking loops\r\n    ._break             -- \"break\" for blocking loops and forked steps\r\n    ._return( [val] )   -- like \"return\" in normal flow\r\n    .raise( error )     -- raise an error in task\r\n    .spawn( blk [, q] ) -- start a new sub task, maybe paused\r\n    .then( ... )        -- Promise/A protocol, tasks are promises\r\n    .success( block )   -- block to run when task is done without error\r\n    .error( block )     -- block to run when task is done but with error\r\n    .progress( block )  -- block to run when some task is done or step walked\r\n    .final( block )     -- block to run when task is all done\r\n    .l8                 -- return global L8 object\r\n    .task               -- return current task\r\n    .parent             -- return parent task\r\n    .tasks              -- return sub tasks\r\n    .top                -- return top task of sub task\r\n    .state              -- return state of task, I->[Q|R]*->C/E/D\r\n    .pause              -- queue step, waiting until task is resumed\r\n    .waiting            -- true if task waiting while running (ie is queued)\r\n    .resume             -- resume execution of a task waiting at some step\r\n    .yield( value )     -- like \"pause\" but provides a value and returns one\r\n    .run( value )       -- like \"resume\" but provides a value and returns one\r\n    .running            -- true if task not done nor waiting\r\n    .cancel             -- cancel task & its sub tasks, brutal\r\n    .canceled           -- true if task was canceled\r\n    .stop               -- gentle cancel\r\n    .stopping           -- true after a gentle cancel, until task is done\r\n    .stopped            -- true if task was gently canceled (gracefull)\r\n    .done               -- true if task done, else it either waits or runs\r\n    .succeed            -- true if task done without error\r\n    .fail               -- true if task done but with an error\r\n    .err                -- return last raised error\r\n    .result             -- \"return\" value of task, see _return and yield()\r\n    .timeout( milli )   -- cancel task if not done in time\r\n    .sleep( milli )     -- block for a while, then reschedule task\r\n    .wait( lock )       -- queue step until some lock opens, then retry\r\n    .end                -- leave scope or loop\r\n    .scope( function )  -- return the L8 scope guarded version of a function"]],"start1":6985,"start2":6985,"length1":5004,"length2":4}]],"length":6989,"saved":false}
{"ts":1351171056698,"patch":[[{"diffs":[[0,"if( this.isRoot "],[-1,")"],[1,"&& CurrentStep.task != this){\r\n    "],[0,"return CurrentSt"]],"start1":2610,"start2":2610,"length1":33,"length2":67},{"diffs":[[0,"ep( block)\r\n"],[1,"  }\r\n"],[0,"  var step ="]],"start1":2687,"start2":2687,"length1":24,"length2":29}]],"length":7028,"saved":false}
{"ts":1351171102170,"patch":[[{"diffs":[[0,"( \"start"],[-1,"s"],[1," step"],[0,"\")})\r\n  "]],"start1":6692,"start2":6692,"length1":17,"length2":21}]],"length":7032,"saved":false}
{"ts":1351173731989,"patch":[[{"diffs":[[0,".pop()\r\n"],[1,"  if( !stack.length ){\r\n    if( task.firstStep ){\r\n      L8.enqueueStep( task.firstStep)\r\n    }\r\n  }\r\n"],[0,"  return"]],"start1":2542,"start2":2542,"length1":16,"length2":118}]],"length":7134,"saved":false}
{"ts":1351174119353,"patch":[[{"diffs":[[0,"function"],[1," enqueue_step"],[0,"( step )"]],"start1":1122,"start2":1122,"length1":16,"length2":29},{"diffs":[[0,"urrentStep ="],[1," null //"],[0," new Step( L"]],"start1":1858,"start2":1858,"length1":24,"length2":32}]],"length":7155,"saved":false}
{"ts":1351174215786,"patch":[[{"diffs":[[0,"ion(){\r\n"],[1,"  task = CurrentStep ? CurrentStep.task : L8\r\n"],[0,"  Curren"]],"start1":2254,"start2":2254,"length1":16,"length2":62}]],"length":7201,"saved":false}
{"ts":1351174336315,"patch":[[{"diffs":[[0,": L8\r\n  "],[-1,"CurrentStep."],[0,"task.beg"]],"start1":2302,"start2":2302,"length1":28,"length2":16},{"diffs":[[0,"\r\n  var "],[-1,"step"],[1,"task"],[0,"  = Curr"]],"start1":2408,"start2":2408,"length1":20,"length2":20},{"diffs":[[0,"Step"],[-1,"\r\n  var task  = s"],[1," ? CurrentS"],[0,"tep.task"],[1," : L8"],[0,"\r\n  "]],"start1":2431,"start2":2431,"length1":33,"length2":32}]],"length":7188,"saved":false}
{"ts":1351174411714,"patch":[[{"diffs":[[0,"sRoot &&"],[1," CurrentTask &&"],[0," Current"]],"start1":2776,"start2":2776,"length1":16,"length2":31}]],"length":7203,"saved":false}
{"ts":1351174434135,"patch":[[{"diffs":[[0," != this"],[1," "],[0,"){\r\n    "]],"start1":2816,"start2":2816,"length1":16,"length2":17}]],"length":7204,"saved":false}
{"ts":1351174466634,"patch":[[{"diffs":[[0," Current"],[-1,"Task"],[1,"Step"],[0," && Curr"]],"start1":2784,"start2":2784,"length1":20,"length2":20}]],"length":7204,"saved":false}
{"ts":1351174528708,"patch":[[{"diffs":[[0,"ck)\r\n  }\r\n  var "],[1,"parent = CurrentStep ? CurrentStep.parent : null\r\n  var "],[0,"step = new Step("]],"start1":2866,"start2":2866,"length1":32,"length2":88},{"diffs":[[0,"( this, "],[-1,"CurrentStep."],[0,"parent, "]],"start1":2953,"start2":2953,"length1":28,"length2":16}]],"length":7248,"saved":false}
{"ts":1351174672635,"patch":[[{"diffs":[[0,"\r\n  var "],[-1,"task"],[1,"step"],[0,"  = Curr"]],"start1":2408,"start2":2408,"length1":20,"length2":20},{"diffs":[[0," CurrentStep"],[-1," ? CurrentS"],[1,"\r\n  var task  = step ? s"],[0,"tep.task : L"]],"start1":2423,"start2":2423,"length1":35,"length2":48}]],"length":7261,"saved":false}
{"ts":1351175280889,"patch":[[{"diffs":[[0,"= true\r\n"],[1,"  this.errorBlock  = null\r\n  this.finalBlock  = null\r\n"],[0,"}\r\nTask."]],"start1":647,"start2":647,"length1":16,"length2":70},{"diffs":[[0,"lock()\r\n"],[1,"    if( this.isRunning ){\r\n      this.isRunning = false\r\n      if( this.next ){\r\n        L8.enqueueStep( this.next)\r\n      }else{\r\n        var task = this.task\r\n        // ToDo: sub task\r\n        if( task.finalBlock ){\r\n          try{\r\n            task.finalBlock()\r\n          }catch( e ){\r\n            throw e\r\n          }\r\n        }\r\n      }\r\n    }\r\n"],[0,"  }catch"]],"start1":2167,"start2":2167,"length1":16,"length2":368},{"diffs":[[0,"in\r\n      .step("],[1," "],[0," function(){ t( "]],"start1":7297,"start2":7297,"length1":32,"length2":33},{"diffs":[[0,"  .step("],[1," "],[0," functio"]],"start1":7351,"start2":7351,"length1":16,"length2":17},{"diffs":[[0," \"step\")})\r\n"],[1,"      .final( function(){ t( \"final\")})\r\n"],[0,"    .end\r\n  "]],"start1":7375,"start2":7375,"length1":24,"length2":65}]],"length":7710,"saved":false}
{"ts":1351175438717,"patch":[[{"diffs":[[0,"}\r\n}\r\n\r\n"],[1,"Task.final = function final( block ){\r\n  this.finalBlock = block\r\n  return this\r\n}\r\n\r\n"],[0,"/*\r\n\r\n  "]],"start1":4136,"start2":4136,"length1":16,"length2":102}]],"length":7796,"saved":false}
{"ts":1351175738684,"patch":[[{"diffs":[[0," \"step\")})\r\n"],[1,"      .step(  function(){\r\n        t( \"sleep\")\r\n        this.sleep( 100)\r\n        t( \"sleep done\")\r\n      })\r\n"],[0,"      .final"]],"start1":7461,"start2":7461,"length1":24,"length2":134}]],"length":7906,"saved":false}
{"ts":1351175815657,"patch":[[{"diffs":[[0,"( \"sleep"],[-1," done"],[1,"ing"],[0,"\")\r\n    "]],"start1":7556,"start2":7556,"length1":21,"length2":19},{"diffs":[[0,")\r\n     "],[1," "],[-1," "],[1,"})\r\n      .step(  function(){ t( \"sleep done\")"],[0,"})\r\n    "]],"start1":7568,"start2":7568,"length1":17,"length2":63}]],"length":7950,"saved":false}
{"ts":1351176513731,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"Step.scheduler = function step_scheduler(){\r\n  if( !this.wasQueued )return\r\n  this.wasQueued = false\r\n  if( !this.isRunning )return\r\n  var step = CurrentStep\r\n  CurrentStep = this\r\n  try{\r\n    this.block()\r\n    if( this.isRunning ){\r\n      this.isRunning = false\r\n      if( this.next ){\r\n        L8.enqueueStep( this.next)\r\n      }else{\r\n        var task = this.task\r\n        // ToDo: sub task\r\n        if( task.finalBlock ){\r\n          try{\r\n            task.finalBlock()\r\n          }catch( e ){\r\n            throw e\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }catch( e ){\r\n    throw e\r\n  }finally{\r\n    CurrentStep = step\r\n    L8.scheduler()\r\n  }\r\n}\r\n\r\n"],[0,"Task"]],"start1":1964,"start2":1964,"length1":663,"length2":8},{"diffs":[[0,"    "],[-1,"if( step.isRunning ){\r\n        step.isRunning = false\r\n        var next_step = step."],[1,"step.scheduleNext()\r\n      L8.scheduler()\r\n    }\r\n  }\r\n}\r\n\r\nStep.scheduler = function step_scheduler(){\r\n  if( !this.wasQueued )return\r\n  this.wasQueued = false\r\n  if( !this.isRunning )return\r\n  var step = CurrentStep\r\n  CurrentStep = this\r\n  try{\r\n    this.block()\r\n    this.scheduleNext()\r\n  }catch( e ){\r\n    throw e\r\n  }finally{\r\n    CurrentStep = step\r\n    L8.scheduler()\r\n  }\r\n}\r\n\r\nStep.scheduleNext = schedule_"],[0,"next"],[1,"(){"],[0,"\r\n  "],[-1,"      if( next_step ){\r\n          L8.enqueueStep( next_step)\r\n        }\r\n      }\r\n      L8.scheduler()\r\n    }\r\n  }\r\n}\r\n\r\nTask.final = function final( block ){\r\n  this.finalBlock = block\r\n  return this"],[1,"if( !this.isRunning )return\r\n  this.isRunning = false\r\n  var next_step = this.next\r\n  if( next_step ){\r\n    L8.enqueueStep( next_step)\r\n  }else{\r\n    var task = this.task\r\n    // ToDo: sub task\r\n    if( task.finalBlock ){\r\n      try{\r\n        task.finalBlock()\r\n      }catch( e ){\r\n        throw e\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nTask.final = function final( block ){\r\n  this.finalBlock = block\r\n  return this\r\n}\r\n\r\nTask.sleep = function sleep( delay ){\r\n  var that = this\r\n  setTimeout( function() {\r\n    that.scheduleNext()\r\n  }, delay);"],[0,"\r\n}\r"]],"start1":3272,"start2":3272,"length1":300,"length2":970}]],"length":7965,"saved":false}
{"ts":1351176580892,"patch":[[{"diffs":[[0,"leNext ="],[1," function"],[0," schedul"]],"start1":3675,"start2":3675,"length1":16,"length2":25}]],"length":7974,"saved":false}
{"ts":1351176733010,"patch":[[{"diffs":[[0,"  this.block"],[-1,"("],[1,".apply( this.task"],[0,")\r\n    this."]],"start1":3527,"start2":3527,"length1":25,"length2":41}]],"length":7990,"saved":false}
{"ts":1351176897272,"patch":[[{"diffs":[[0,"var "],[-1,"that = this"],[1,"step = CurrentStep"],[0,"\r\n  "]],"start1":4181,"start2":4181,"length1":19,"length2":26},{"diffs":[[0,"    "],[-1,"that"],[1,"step"],[0,".sch"]],"start1":4233,"start2":4233,"length1":12,"length2":12}]],"length":7997,"saved":false}
{"ts":1351176968054,"patch":[[{"diffs":[[0,".sleep( "],[-1,"1"],[1,"20"],[0,"00)\r\n   "]],"start1":7580,"start2":7580,"length1":17,"length2":18}]],"length":7998,"saved":false}
{"ts":1351177007531,"patch":[[{"diffs":[[0,", delay)"],[-1,";"],[1,"\r\n  return this"],[0,"\r\n}\r\n\r\n/"]],"start1":4261,"start2":4261,"length1":17,"length2":31}]],"length":8012,"saved":false}
{"ts":1351177228551,"patch":[[{"diffs":[[0,"\r\n  "],[-1,"setTimeout( function() {"],[1,"var task = step.task\r\n  task.currentStep = step\r\n  setTimeout( function() {\r\n    if( !task.currentStep == step )return\r\n    step.isRunning = true"],[0,"\r\n  "]],"start1":4203,"start2":4203,"length1":32,"length2":153},{"diffs":[[0,"delay)\r\n"],[1,"  step.isRunning = false\r\n"],[0,"  return"]],"start1":4384,"start2":4384,"length1":16,"length2":42}]],"length":8159,"saved":false}
{"ts":1351177348576,"patch":[[{"diffs":[[0,"\r\n  "],[-1,"task.currentStep = step"],[1,"if( !step.isRunning ){\r\n    throw \"Can't sleep, not running\"\r\n  }\r\n  task.currentStep = step\r\n  step.isRunning = false"],[0,"\r\n  "]],"start1":4227,"start2":4227,"length1":31,"length2":126},{"diffs":[[0,"y)\r\n"],[-1,"  step.isRunning = false\r\n"],[0,"  re"]],"start1":4483,"start2":4483,"length1":34,"length2":8}]],"length":8228,"saved":false}
{"ts":1351177376155,"patch":[[{"diffs":[[0,"tStep =="],[1,"="],[0," step )r"]],"start1":4399,"start2":4399,"length1":16,"length2":17}]],"length":8229,"saved":false}
{"ts":1351177405201,"patch":[[{"diffs":[[0,".task !="],[1,"="],[0," this ){"]],"start1":2575,"start2":2575,"length1":16,"length2":17}]],"length":8230,"saved":false}
{"ts":1351177934075,"patch":[[{"diffs":[[0,"\r\n  "],[-1,"return function walk_cb(){\r\n    var previous_step = CurrentStep\r\n    CurrentStep = step\r\n    try{\r\n      block.apply( step.task, arguments)"],[1,"if( !step.isRunning ){\r\n    throw \"Can't walk, not running\"\r\n  }\r\n  step.isRunning = false\r\n  step.task.currentStep = step\r\n  var that = this\r\n  return function walk_cb(){\r\n    var previous_step = CurrentStep\r\n    CurrentStep = step\r\n    try{\r\n      block.apply( step.task, arguments)\r\n      if( that.currentStep === step ){\r\n        if( !step.isRunning ){\r\n          step.isRunning = true\r\n          step.scheduleNext()\r\n        }\r\n      }"],[0,"\r\n  "]],"start1":3043,"start2":3043,"length1":147,"length2":448},{"diffs":[[0,"ep\r\n"],[-1,"      step.scheduleNext()\r\n"],[0,"    "]],"start1":3568,"start2":3568,"length1":35,"length2":8}]],"length":8504,"saved":false}
{"ts":1351177999448,"patch":[[{"diffs":[[0,"== step ){\r\n"],[1,"        that.currentStep = null\r\n"],[0,"        if( "]],"start1":3361,"start2":3361,"length1":24,"length2":57}]],"length":8537,"saved":false}
{"ts":1351185095419,"patch":[[{"diffs":[[0,"ion test"],[-1,"_1"],[1,"s"],[0,"(){\r\n  f"]],"start1":7736,"start2":7736,"length1":18,"length2":17},{"diffs":[[0,"= [\"test"],[-1,"_1"],[0,""],[1,""],[0,"\"]\r\n    "]],"start1":7779,"start2":7779,"length1":18,"length2":16},{"diffs":[[0,"arts\")\r\n"],[1,"  test_1()\r\n  t( \"starts scheduler\")\r\n  L8.scheduler()\r\n\r\n"],[0,"  functi"]],"start1":7912,"start2":7912,"length1":16,"length2":74},{"diffs":[[0,"nction t"],[-1,"ask()"],[1,"est_1"],[0,"{\r\n    t"]],"start1":7982,"start2":7982,"length1":21,"length2":21},{"diffs":[[0,"   t( \"t"],[-1,"ask"],[1,"est_1"],[0,"\")\r\n    "]],"start1":7999,"start2":7999,"length1":19,"length2":21},{"diffs":[[0," function(){"],[1,"\r\n       "],[0," t( \"final\")"]],"start1":8284,"start2":8284,"length1":24,"length2":33},{"diffs":[[0,"inal"],[-1,"\")})\r\n    .end\r\n  }\r\n  task"],[1," 1\")\r\n        test_2()\r\n      })\r\n    .end\r\n  }\r\n\r\n  var test_2 = L8.scope( function test2"],[0,"()"],[1,"{"],[0,"\r\n "],[1,"   this\r\n    .step( function(){"],[0," t( "]],"start1":8311,"start2":8311,"length1":40,"length2":135},{"diffs":[[0,"tart"],[-1,"s"],[0," s"],[-1,"cheduler\")\r\n  L8.scheduler()"],[1,"tep\")})\r\n    .step( function(){ setTimeout( function() {\r\n      this.walk()\r\n    }, 0);})\r\n    .final( function(){\r\n      t( \"final 2\")\r\n    })\r\n  })\r\n"],[0,"\r\n}\r"]],"start1":8448,"start2":8448,"length1":39,"length2":161}]],"length":8820,"saved":false}
{"ts":1351185151942,"patch":[[{"diffs":[[0,"this\r\n    .step("],[1," "],[0," function(){ t( "]],"start1":8414,"start2":8414,"length1":32,"length2":33},{"diffs":[[0,"  .step("],[1," "],[0," functio"]],"start1":8466,"start2":8466,"length1":16,"length2":17},{"diffs":[[0,"out("],[-1," function() {\r\n     "],[0," thi"]],"start1":8495,"start2":8495,"length1":28,"length2":8},{"diffs":[[0,"s.walk()"],[-1,"\r\n   "],[0," }, 0);}"]],"start1":8503,"start2":8503,"length1":21,"length2":16}]],"length":8797,"saved":false}
{"ts":1351185220776,"patch":[[{"diffs":[[0,"is\r\n  try{\r\n"],[1,"    if( this.block ){\r\n  "],[0,"    this.blo"]],"start1":3821,"start2":3821,"length1":24,"length2":49},{"diffs":[[0,"this.task)\r\n"],[1,"    }\r\n"],[0,"    this.sch"]],"start1":3880,"start2":3880,"length1":24,"length2":31}]],"length":8829,"saved":false}
{"ts":1351185510799,"patch":[[{"diffs":[[0," true\r\n}\r\n\r\n"],[1,"L8.scope = function scope( fn ){\r\n  return function (){\r\n    try{\r\n      this.begin\r\n        fn()\r\n      this.end\r\n    }catch( e){\r\n      this.end\r\n      throw e\r\n    }\r\n  }\r\n}\r\n\r\n"],[0,"function Ste"]],"start1":1309,"start2":1309,"length1":24,"length2":204}]],"length":9009,"saved":false}
{"ts":1351185535453,"patch":[[{"diffs":[[0,"throw e\r\n    }\r\n"],[1,"    return this\r\n"],[0,"  }\r\n}\r\n\r\nfuncti"]],"start1":1475,"start2":1475,"length1":32,"length2":49}]],"length":9026,"saved":false}
{"ts":1351185869574,"patch":[[{"diffs":[[0,"n test_1"],[1,"()"],[0,"{\r\n    t"]],"start1":8216,"start2":8216,"length1":16,"length2":18}]],"length":9028,"saved":false}
{"ts":1351185966166,"patch":[[{"diffs":[[0,"s.walk()"],[-1," }"],[0,", 0);})\r"]],"start1":8734,"start2":8734,"length1":18,"length2":16}]],"length":9026,"saved":false}
{"ts":1351185999877,"patch":[[{"diffs":[[0,"t( \"start step\")"],[1," "],[0,"})\r\n      .step("]],"start1":8287,"start2":8287,"length1":32,"length2":33},{"diffs":[[0,"{ t( \"step\")"],[1," "],[0,"})\r\n      .s"]],"start1":8332,"start2":8332,"length1":24,"length2":25},{"diffs":[[0,"p done\")"],[1," "],[0,"})\r\n    "]],"start1":8492,"start2":8492,"length1":16,"length2":17},{"diffs":[[0,"t step\")"],[1," "],[0,"})\r\n    "]],"start1":8686,"start2":8686,"length1":16,"length2":17},{"diffs":[[0,"lk(), 0)"],[-1,";"],[1," "],[0,"})\r\n    "]],"start1":8742,"start2":8742,"length1":17,"length2":17}]],"length":9030,"saved":false}
{"ts":1351186034198,"patch":[[{"diffs":[[0,"000\r\n)\r\ntest"],[-1,"_1"],[1,"s"],[0,"()\r\ntrace( \""]],"start1":8993,"start2":8993,"length1":26,"length2":25}]],"length":9029,"saved":false}
{"ts":1351186561806,"patch":[[{"diffs":[[0,"nction (){\r\n"],[1,"    var task = CurrentStep ? CurrentStep.task : L8\r\n"],[0,"    try{\r\n  "]],"start1":1366,"start2":1366,"length1":24,"length2":76},{"diffs":[[0,"\n      t"],[-1,"his"],[1,"ask"],[0,".begin\r\n"]],"start1":1439,"start2":1439,"length1":19,"length2":19},{"diffs":[[0,"   fn()\r\n      t"],[-1,"his"],[1,"ask"],[0,".end\r\n    }catch"]],"start1":1463,"start2":1463,"length1":35,"length2":35},{"diffs":[[0,"\n      t"],[-1,"his"],[1,"ask"],[0,".end\r\n  "]],"start1":1504,"start2":1504,"length1":19,"length2":19},{"diffs":[[0,"return t"],[-1,"his"],[1,"ask"],[0,"\r\n  }\r\n}"]],"start1":1547,"start2":1547,"length1":19,"length2":19}]],"length":9081,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351186712628,"patch":[[{"diffs":[[0,"\"util\")\r"],[1,"\nUtil.debug( \"entering l8.js\")\r"],[0,"\n\r\nfunct"]],"start1":160,"start2":160,"length1":16,"length2":47}]],"length":9112,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351188811470,"patch":[[{"diffs":[[0,"      fn"],[-1,"("],[1,".apply( task"],[0,")\r\n     "]],"start1":1491,"start2":1491,"length1":17,"length2":28}]],"length":9123,"saved":false}
{"ts":1351190344877,"patch":[[{"diffs":[[0,"= true\r\n"],[1,"  this.isDone      = false\r\n"],[0,"  this.e"]],"start1":678,"start2":678,"length1":16,"length2":44},{"diffs":[[0,"this\r\n})\r\n\r\n"],[1,"Task.__defineGetter__( \"done\", function(){\r\n  return this.isDone\r\n})\r\n\r\n"],[0,"Task.step = "]],"start1":2798,"start2":2798,"length1":24,"length2":96},{"diffs":[[0,")\r\n  }\r\n"],[1,"  if( this.done ){\r\n    throw \"Can't add a new step to, task is done\"\r\n  }\r\n"],[0,"  var pa"]],"start1":3024,"start2":3024,"length1":16,"length2":92},{"diffs":[[0,": sub task\r\n"],[1,"    task.isDone = true\r\n"],[0,"    if( task"]],"start1":4719,"start2":4719,"length1":24,"length2":48}]],"length":9323,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351191357519,"patch":[[{"diffs":[[0,"k : L8\r\n"],[1,"  if( task.done || task === L8){\r\n    task = new Task( L8)\r\n  }\r\n"],[0,"  task.b"]],"start1":2370,"start2":2370,"length1":16,"length2":81},{"diffs":[[0,"tep)\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n})\r\n\r\nTask.__d"]],"start1":2475,"start2":2475,"length1":35,"length2":35},{"diffs":[[0,"var "],[-1,"step  = CurrentStep\r\n  var task  = step ? step.task : L8"],[1,"task  = this"],[0,"\r\n  "]],"start1":2547,"start2":2547,"length1":64,"length2":20},{"diffs":[[0,"add "],[-1,"a "],[0,"new step"],[-1," to"],[0,", ta"]],"start1":3090,"start2":3090,"length1":21,"length2":16}]],"length":9339,"saved":false}
{"ts":1351191447195,"patch":[[{"diffs":[[0," top != "],[-1,"ste"],[1,"to"],[0,"p ){\r\n"],[1,"    // TODO: check balance\r\n"],[0,"    thro"]],"start1":2640,"start2":2640,"length1":25,"length2":52}]],"length":9366,"saved":false}
{"ts":1351191721549,"patch":[[{"diffs":[[0," try{\r\n     "],[1," task ="],[0," task.begin\r"]],"start1":1492,"start2":1492,"length1":24,"length2":31},{"diffs":[[0,"k === L8"],[1," "],[0,"){\r\n    "]],"start1":2407,"start2":2407,"length1":16,"length2":17}]],"length":9374,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351191996471,"patch":[[{"diffs":[[0,"\r\n    try{\r\n"],[1,"      if( block ){\r\n  "],[0,"      block."]],"start1":3797,"start2":3797,"length1":24,"length2":46},{"diffs":[[0,"ments)\r\n"],[1,"      }\r\n"],[0,"      if"]],"start1":3865,"start2":3865,"length1":16,"length2":25}]],"length":9405,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351192633027,"patch":[[{"diffs":[[0,".sleep( "],[-1,"20"],[1,"1"],[0,"00)\r\n   "]],"start1":8785,"start2":8785,"length1":18,"length2":17}]],"length":9404,"saved":false}
{"ts":1351192746874,"patch":[[{"diffs":[[0,"{ t( \"start step"],[1," 1"],[0,"\") })\r\n      .st"]],"start1":8661,"start2":8661,"length1":32,"length2":34},{"diffs":[[0," \"start step"],[1," 2"],[0,"\") })\r\n    ."]],"start1":9057,"start2":9057,"length1":24,"length2":26}]],"length":9408,"saved":false}
{"ts":1351192824689,"patch":[[{"diffs":[[0,"k(), 0) })\r\n"],[1,"    .step(  function(){ t( \"sleep done\"))\r\n"],[0,"    .final( "]],"start1":9122,"start2":9122,"length1":24,"length2":67}]],"length":9451,"saved":false}
{"ts":1351192839333,"patch":[[{"diffs":[[0,"){ t( \"sleep"],[1,"/timeout"],[0," done\"))\r\n  "]],"start1":9155,"start2":9155,"length1":24,"length2":32}]],"length":9459,"saved":false}
{"ts":1351192860197,"patch":[[{"diffs":[[0,"t done\")"],[1," }"],[0,")\r\n    ."]],"start1":9174,"start2":9174,"length1":16,"length2":18}]],"length":9461,"saved":false}
{"ts":1351193034901,"patch":[[{"diffs":[[0,"r()\r\n\r\n "],[1," var test_1 ="],[0," functio"]],"start1":8576,"start2":8576,"length1":16,"length2":29},{"diffs":[[0,"ion test"],[-1,"_"],[0,"1(){\r\n  "]],"start1":8603,"start2":8603,"length1":17,"length2":16}]],"length":9473,"saved":false}
{"ts":1351193121258,"patch":[[{"diffs":[[0,"s\")\r"],[-1,"\n  test_1()\r\n  t( \"starts scheduler\")\r\n  L8.scheduler()\r"],[0,"\n\r\n "]],"start1":8520,"start2":8520,"length1":64,"length2":8},{"diffs":[[0,"})\r\n  })\r\n\r\n"],[1,"  test_1()\r\n  t( \"starts scheduler\")\r\n  L8.scheduler()\r\n"],[0,"}\r\n\r\ntrace( "]],"start1":9193,"start2":9193,"length1":24,"length2":80}]],"length":9473,"saved":false}
{"ts":1351193239202,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n  })"],[1,"  test_last()\r\n    })\r\n  })\r\n\r\n  var test_last = function(){\r\n    trace( \"SUCCESS!!! all tests ok\")\r\n  }"],[0,"\r\n\r\n"]],"start1":9189,"start2":9189,"length1":16,"length2":112}]],"length":9569,"saved":false}
{"ts":1351193313293,"patch":[[{"diffs":[[0,"unt_down){\r\n"],[1,"      trace( \"exiting...\")\r\n"],[0,"      proces"]],"start1":9481,"start2":9481,"length1":24,"length2":52}]],"length":9597,"saved":false}
{"ts":1351193628892,"patch":[[{"diffs":[[0,"unt_down"],[1," "],[0,"){\r\n    "]],"start1":9481,"start2":9481,"length1":16,"length2":17},{"diffs":[[0,"e( \""],[-1,"done L8"],[1,"L8 scheduler started"],[0,"\")\r\n"]],"start1":9583,"start2":9583,"length1":15,"length2":28}]],"length":9611,"saved":false}
{"ts":1351193880658,"patch":[[{"diffs":[[0," null)\r\n"],[1,"L8.l8 = L8\r\n"],[0,"L8.isRoo"]],"start1":815,"start2":815,"length1":16,"length2":28},{"diffs":[[0,"test2(){"],[-1,"\r\n   "],[0," this\r\n "]],"start1":8979,"start2":8979,"length1":21,"length2":16}]],"length":9618,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352190101597,"patch":[[{"diffs":[[0," create\r"],[1,"\n// 2012/11/06, JHR,\r"],[0,"\n\r\nvar L"]],"start1":97,"start2":97,"length1":16,"length2":37},{"diffs":[[0," \"start "],[1,"te"],[0,"st"],[-1,"ep"],[0," 2\") })\r"]],"start1":9041,"start2":9041,"length1":20,"length2":20},{"diffs":[[0,"est_"],[-1,"last"],[1,"3()\r\n    })\r\n  })\r\n\r\n  var test_3 = L8.scope( function test3(){ this\r\n   .step( function(){ t( \"start test 2\") })\r\n   .step( function(){\r\n     t( \"add step 1\")\r\n     this.step( function(){ t( \"first step\") })\r\n     t( \"add step 2\")\r\n     this.step( function(){ t( \"second step\") })\r\n   })\r\n   .step( function(){ t(\"third & final step\") })\r\n   .final( function"],[0,"()"],[1,"{"],[0,"\r\n "],[1,"    t( \"final 3\")\r\n     test_last()\r\n"],[0,"   }"]],"start1":9224,"start2":9224,"length1":17,"length2":410}]],"length":10032,"saved":false}
{"ts":1352190498666,"patch":[[{"diffs":[[0,"one = true\r\n"],[1,"    if( task.err ){\r\n      if( task.errorBlock ){\r\n        try{\r\n          task.errorBlock()\r\n        }catch( e ){\r\n          throw e\r\n        }\r\n      }\r\n    }\r\n"],[0,"    if( task"]],"start1":4858,"start2":4858,"length1":24,"length2":186},{"diffs":[[0," this\r\n}\r\n\r\n"],[1,"Task.error = function error( block ){\r\n  this.errorBlock = block\r\n  return this\r\n}\r\n\r\nTask.success = function success( block ){\r\n  this.successBlock = block\r\n  return this\r\n}\r\n\r\n"],[0,"Task.sleep ="]],"start1":5236,"start2":5236,"length1":24,"length2":202}]],"length":10372,"saved":false}
{"ts":1352191219490,"patch":[[{"diffs":[[0," = null\r"],[1,"\nvar NextStep    = null\r"],[0,"\n\r\nL8.sc"]],"start1":934,"start2":934,"length1":16,"length2":40},{"diffs":[[0,": null\r\n"],[1,"  var insert_at = NextStep ? NextStep.previous : this.lastStep\r\n"],[0,"  var st"]],"start1":3264,"start2":3264,"length1":16,"length2":80},{"diffs":[[0,"parent, "],[-1,"this.lastStep"],[1,"insert_at"],[0,", block)"]],"start1":3365,"start2":3365,"length1":29,"length2":25},{"diffs":[[0," )return\r\n  var "],[1,"old_"],[0,"step = CurrentSt"]],"start1":4433,"start2":4433,"length1":32,"length2":36},{"diffs":[[0,"entStep "],[1," "],[0,"= this\r\n"],[1,"  var old_next = NextStep\r\n  NextStep     = this.next\r\n"],[0,"  try{\r\n"]],"start1":4479,"start2":4479,"length1":24,"length2":80},{"diffs":[[0,"rrentStep = "],[-1,"step"],[1,"old_step\r\n    NextStep    = old_next"],[0,"\r\n    L8.sch"]],"start1":4698,"start2":4698,"length1":28,"length2":60},{"diffs":[[0,"one = true\r\n"],[1,"    try{\r\n  "],[0,"    if( task"]],"start1":5034,"start2":5034,"length1":24,"length2":36},{"diffs":[[0,"ask.err ){\r\n"],[1,"  "],[0,"      if( ta"]],"start1":5067,"start2":5067,"length1":24,"length2":26},{"diffs":[[0,"){\r\n        "],[1,"  "],[0,"try{\r\n      "]],"start1":5107,"start2":5107,"length1":24,"length2":26},{"diffs":[[0,"\r\n          "],[1," "],[1," "],[0,"task.errorBl"]],"start1":5125,"start2":5125,"length1":24,"length2":26},{"diffs":[[0,"()\r\n        "],[1,"  "],[0,"}catch( e ){"]],"start1":5154,"start2":5154,"length1":24,"length2":26},{"diffs":[[0,"e ){\r\n          "],[1," "],[1," "],[0,"throw e\r\n       "]],"start1":5176,"start2":5176,"length1":32,"length2":34},{"diffs":[[0,"hrow e\r\n        "],[1,"  "],[0,"}\r\n      }\r\n    "]],"start1":5195,"start2":5195,"length1":32,"length2":34},{"diffs":[[0,"\r\n      "],[1," "],[1," "],[0,"}\r\n    "],[-1,"}\r\n"],[1,"  }else{\r\n        if( task.successBlock ){\r\n          try{\r\n            task.successBlock()\r\n          }catch( e ){\r\n            throw e\r\n          }\r\n        }\r\n      }\r\n    }catch( e ){\r\n      throw e\r\n    }finally{\r\n  "],[0,"    if( "]],"start1":5214,"start2":5214,"length1":26,"length2":246},{"diffs":[[0,"k ){\r\n      "],[1,"  "],[0,"try{\r\n      "]],"start1":5474,"start2":5474,"length1":24,"length2":26},{"diffs":[[0,"y{\r\n        "],[1," "],[1," "],[0,"task.finalBl"]],"start1":5490,"start2":5490,"length1":24,"length2":26},{"diffs":[[0,"ck()\r\n      "],[1,"  "],[0,"}catch( e ){"]],"start1":5517,"start2":5517,"length1":24,"length2":26},{"diffs":[[0,"( e ){\r\n        "],[1," "],[1," "],[0,"throw e\r\n      }"]],"start1":5537,"start2":5537,"length1":32,"length2":34},{"diffs":[[0,"   throw e\r\n"],[1,"        }\r\n"],[0,"      }\r\n   "]],"start1":5552,"start2":5552,"length1":24,"length2":35}]],"length":10811,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352293316710,"patch":[[{"diffs":[[0,"\n  this."],[-1,""],[0,""],[1,"stepResult  = undefined\r\n  this."],[0,"wasCance"]],"start1":651,"start2":651,"length1":16,"length2":48},{"diffs":[[0,"Done\r\n})\r\n\r\n"],[1,"Task.__defineGetter__( \"result\", function(){\r\n  if( this.isRoot )return CurrentStep.task.stepResult\r\n}\r\n\r\n"],[0,"Task.step = "]],"start1":3015,"start2":3015,"length1":24,"length2":130},{"diffs":[[0,"tep = step\r\n"],[1,"    if( arguments.length === 1 ){\r\n      that.stepResult = arguments[0]\r\n    }else{\r\n      that.stepResupt = arguments\r\n    }\r\n"],[0,"    try{\r\n  "]],"start1":4042,"start2":4042,"length1":24,"length2":151},{"diffs":[[0,"\n       "],[1," that.stepResult ="],[0," block.a"]],"start1":4210,"start2":4210,"length1":16,"length2":34},{"diffs":[[0,"   }\r\n  }\r\n}\r\n\r\n"],[1,"Task.__defineGetter__( \"next\", function(){\r\n  return this.walk()\r\n}\r\n\r\n"],[0,"Step.scheduler ="]],"start1":4577,"start2":4577,"length1":32,"length2":103},{"diffs":[[0,"\n      this."],[-1,""],[0,""],[1,"stepResult = this."],[0,"block.apply("]],"start1":4935,"start2":4935,"length1":24,"length2":42},{"diffs":[[0,"atch( e ){\r\n"],[1,"    // ToDo: _return exception handling\r\n"],[0,"    throw e\r"]],"start1":5026,"start2":5026,"length1":24,"length2":65},{"diffs":[[0,"( next_step)"],[-1,""],[0,""],[1,"\r\n  // When last step is done"],[0,"\r\n  }else{\r\n"]],"start1":5362,"start2":5362,"length1":24,"length2":53}]],"length":11253,"saved":false}
{"ts":1352294504896,"patch":[[{"diffs":[[0,"Result\r\n"],[1,"  return this.stepResult\r\n}\r\n\r\nTask.__defineSetter__( \"result\", function( val){\r\n  if( this.isRoot )return CurrentStep.task.stepResult = val\r\n  return this.stepResult = val\r\n"],[0,"}\r\n\r\nTas"]],"start1":3120,"start2":3120,"length1":16,"length2":190}]],"length":11427,"saved":false}
{"ts":1352295602231,"patch":[[{"diffs":[[0,"esult\r\n}"],[1,")"],[0,"\r\n\r\nTask"]],"start1":3147,"start2":3147,"length1":16,"length2":17},{"diffs":[[0,"= val\r\n}"],[1,")"],[0,"\r\n\r\nTask"]],"start1":3296,"start2":3296,"length1":16,"length2":17}]],"length":11429,"saved":false}
{"ts":1352295629261,"patch":[[{"diffs":[[0,"is.walk("],[1," null"],[0,")\r\n}"],[1,")"],[0,"\r\n\r\nStep"]],"start1":4824,"start2":4824,"length1":20,"length2":26}]],"length":11435,"saved":false}
{"ts":1352295872645,"patch":[[{"diffs":[[0,"sts(){\r\n"],[1,"  var test\r\n"],[0,"  functi"]],"start1":9783,"start2":9783,"length1":16,"length2":28},{"diffs":[[0," [\"test\""],[1," + (test ? \" \" + test : \"\")"],[0,"]\r\n    f"]],"start1":9833,"start2":9833,"length1":16,"length2":43},{"diffs":[[0,"   t"],[-1,"( \"test_1"],[1,"est = 1\r\n    t( \"go"],[0,"\")\r\n"]],"start1":10037,"start2":10037,"length1":17,"length2":27},{"diffs":[[0,"( \"start"],[-1," step 1"],[0,"\") })\r\n "]],"start1":10105,"start2":10105,"length1":23,"length2":16},{"diffs":[[0,"test2(){"],[1,"\r\n    test = 2\r\n   "],[0," this\r\n "]],"start1":10445,"start2":10445,"length1":16,"length2":35},{"diffs":[[0,"ion(){ t( \"start"],[-1," test 2"],[0,"\") })\r\n    .step"]],"start1":10496,"start2":10496,"length1":39,"length2":32},{"diffs":[[0,"test3(){"],[1,"\r\n    test = 3\r\n   "],[0," this\r\n"],[1," "],[0,"   .step"]],"start1":10740,"start2":10740,"length1":23,"length2":43},{"diffs":[[0,"tart"],[-1," test 2"],[0,"\") })\r\n"],[1," "],[0,"   ."]],"start1":10802,"start2":10802,"length1":22,"length2":16},{"diffs":[[0,"on(){\r\n     "],[1," "],[0,"t( \"add step"]],"start1":10830,"start2":10830,"length1":24,"length2":25},{"diffs":[[0,"d step 1\")\r\n"],[1," "],[0,"     this.st"]],"start1":10849,"start2":10849,"length1":24,"length2":25},{"diffs":[[0,"\") })\r\n     "],[1," "],[0,"t( \"add step"]],"start1":10904,"start2":10904,"length1":24,"length2":25},{"diffs":[[0,"d step 2\")\r\n"],[1," "],[0,"     this.st"]],"start1":10923,"start2":10923,"length1":24,"length2":25}]],"length":11507,"saved":false}
{"ts":1352329558988,"patch":[[{"diffs":[[0,"f( this."],[-1,"d"],[1,"isD"],[0,"one ){\r\n"]],"start1":3462,"start2":3462,"length1":17,"length2":19},{"diffs":[[0,"insert_a"],[-1,"t"],[1,"fter"],[0," = NextS"]],"start1":3594,"start2":3594,"length1":17,"length2":20},{"diffs":[[0,"\r\n  "],[-1,"CurrentStep  = this\r\n  "],[0,"var "]],"start1":5012,"start2":5012,"length1":31,"length2":8},{"diffs":[[0,"t = NextStep"],[1,"\r\n  CurrentStep  = this"],[0,"\r\n  NextStep"]],"start1":5027,"start2":5027,"length1":24,"length2":47},{"diffs":[[0,"\n      this."],[1,"task."],[0,"stepResult ="]],"start1":5122,"start2":5122,"length1":24,"length2":29}]],"length":11517,"saved":false}
{"ts":1352330079545,"patch":[[{"diffs":[[0,"insert_a"],[-1,"t"],[1,"fter"],[0,", block)"]],"start1":3692,"start2":3692,"length1":17,"length2":20}]],"length":11520,"saved":false}
{"ts":1352330811867,"patch":[[{"diffs":[[0,"s.next\r\n    "],[-1,"this."],[1,"previous.next.previous = this\r\n    "],[0,"previous.nex"]],"start1":2202,"start2":2202,"length1":29,"length2":59}]],"length":11550,"saved":false}
{"ts":1352363253479,"patch":[[{"diffs":[[0,"( \"final"],[-1," 1"],[0,""],[1,""],[0,"\")\r\n    "]],"start1":10395,"start2":10395,"length1":18,"length2":16},{"diffs":[[0,"( \"final"],[-1," 2"],[0,""],[1,""],[0,"\")\r\n    "]],"start1":10701,"start2":10701,"length1":18,"length2":16},{"diffs":[[0," step\") })\r\n"],[1,"   .success( function(){ t(\"success\") })\r\n   .final( function(){\r\n     t( \"final\")\r\n     test_4()\r\n   })\r\n  })\r\n\r\n  var test_4 = L8.scope( function test4(){\r\n    test = 4\r\n    this\r\n    .step( function(){ t( \"start\") })\r\n    .step( function(){\r\n      t( \"raise error\")\r\n      throw \"step error\"\r\n   })\r\n   .step( function(){ t(\"third & final step\") })\r\n   .error( function(){ t(\"error:\", this.err)})\r\n"],[0,"   .final( f"]],"start1":11070,"start2":11070,"length1":24,"length2":425},{"diffs":[[0,"( \"final"],[-1," 3"],[0,"\")\r\n    "]],"start1":11513,"start2":11513,"length1":18,"length2":16}]],"length":11945,"saved":false}
{"ts":1352363354132,"patch":[[{"diffs":[[0," false\r\n"],[1,"  var task = this.task\r\n"],[0,"  var ne"]],"start1":5512,"start2":5512,"length1":16,"length2":40},{"diffs":[[0,"t\r\n  if("],[1," !task.err &&"],[0," next_st"]],"start1":5570,"start2":5570,"length1":16,"length2":29},{"diffs":[[0,"e{\r\n"],[-1,"    var task = this.task\r\n"],[0,"    "]],"start1":5673,"start2":5673,"length1":34,"length2":8}]],"length":11956,"saved":false}
{"ts":1352363808559,"patch":[[{"diffs":[[0,"\r\n  "],[-1,"  this.scheduleNext()\r\n  "],[0,""],[1,""],[0,"}cat"]],"start1":5220,"start2":5220,"length1":33,"length2":8},{"diffs":[[0,"dling\r\n    t"],[-1,"hrow"],[1,"ask.err ="],[0," e\r\n  }final"]],"start1":5272,"start2":5272,"length1":28,"length2":33},{"diffs":[[0," }finally{\r\n"],[1,"    this.scheduleNext()\r\n"],[0,"    CurrentS"]],"start1":5298,"start2":5298,"length1":24,"length2":49},{"diffs":[[0,"_step)\r\n"],[1,"    return\r\n"],[0,"  // Whe"]],"start1":5635,"start2":5635,"length1":16,"length2":28},{"diffs":[[0," is done\r\n  "],[-1,"}else"],[1,"try"],[0,"{\r\n    // To"]],"start1":5674,"start2":5674,"length1":29,"length2":27},{"diffs":[[0,"  }catch( e ){\r\n"],[1,"      task.err = e\r\n"],[0,"      throw e\r\n "]],"start1":6097,"start2":6097,"length1":32,"length2":52},{"diffs":[[0,"  }\r\n      }"],[-1,""],[0,""],[1,"\r\n    }\r\n  }catch( e ){\r\n    task.err = err\r\n    if( task.parent ){\r\n      task.parent.raise( e)"],[0,"\r\n    }\r\n  }"]],"start1":6283,"start2":6283,"length1":24,"length2":120}]],"length":12087,"saved":false}
{"ts":1352363873812,"patch":[[{"diffs":[[0,"return\r\n"],[1,"  }\r\n"],[0,"  // Whe"]],"start1":5647,"start2":5647,"length1":16,"length2":21}]],"length":12092,"saved":false}
{"ts":1352364440763,"patch":[[{"diffs":[[0,"\r\n  "],[-1,"return this.isDone"],[1,"if( this.isRoot )return CurrentStep.task.isDone\r\n  return this.isDone\r\n})\r\n\r\nTask.__defineGetter__( \"succeed\", function(){\r\n  if( this.isRoot )return CurrentStep.task.succeed\r\n  return this.isDone && !this.err\r\n})\r\n\r\nTask.__defineGetter__( \"fail\", function(){\r\n  if( this.isRoot )return CurrentStep.task.fail\r\n  return this.isDone && this.err"],[0,"\r\n})"]],"start1":3027,"start2":3027,"length1":26,"length2":350},{"diffs":[[0," = val\r\n"],[-1,""],[0,"})\r\n\r\n"],[1,"Task.__defineGetter__( \"err\", function(){\r\n  if( this.isRoot )return CurrentStep.task.err\r\n  return this.err\r\n}\r\n\r\n"],[0,"Task.ste"]],"start1":3649,"start2":3649,"length1":22,"length2":137},{"diffs":[[0,"ction(){ t(\""],[-1,"third & "],[0,"final step\")"]],"start1":11984,"start2":11984,"length1":32,"length2":24},{"diffs":[[0,"t(\"error"],[-1,":"],[0,"\", this."]],"start1":12036,"start2":12036,"length1":17,"length2":16}]],"length":12522,"saved":false}
{"ts":1352364495281,"patch":[[{"diffs":[[0,"return this."],[-1,"er"],[1,"stepErro"],[0,"r\r\n}\r\n\r\nTask"]],"start1":3756,"start2":3756,"length1":26,"length2":32}]],"length":12528,"saved":false}
{"ts":1352364615783,"patch":[[{"diffs":[[0,"efined\r\n"],[1,"  this.stepError   = undefined\r\n"],[0,"  this.w"]],"start1":676,"start2":676,"length1":16,"length2":48},{"diffs":[[0,"dling\r\n    task."],[-1,"er"],[1,"stepErro"],[0,"r = e\r\n  }finall"]],"start1":5749,"start2":5749,"length1":34,"length2":40},{"diffs":[[0,"( !task."],[-1,"er"],[1,"stepErro"],[0,"r && nex"]],"start1":6065,"start2":6065,"length1":18,"length2":24},{"diffs":[[0,"f( task."],[-1,"er"],[1,"stepErro"],[0,"r ){\r\n  "]],"start1":6250,"start2":6250,"length1":18,"length2":24},{"diffs":[[0,"\n      task."],[-1,"er"],[1,"stepErro"],[0,"r = e\r\n     "]],"start1":6612,"start2":6612,"length1":26,"length2":32},{"diffs":[[0,"ask."],[-1,"er"],[1,"stepErro"],[0,"r = e"],[-1,"rr"],[0,"\r\n  "]],"start1":6831,"start2":6831,"length1":17,"length2":21}]],"length":12588,"saved":false}
{"ts":1352364647850,"patch":[[{"diffs":[[0,"Error\r\n}"],[1,")"],[0,"\r\n\r\nTask"]],"start1":3804,"start2":3804,"length1":16,"length2":17}]],"length":12589,"saved":false}
{"ts":1352364707896,"patch":[[{"diffs":[[0,"task"],[-1,".done"],[1," === L8"],[0," || task"],[-1," === L8"],[1,".done"],[0," ){\r"]],"start1":2542,"start2":2542,"length1":28,"length2":28}]],"length":12589,"saved":false}
{"ts":1352364979895,"patch":[[{"diffs":[[0,"stepResu"],[-1,"p"],[1,"l"],[0,"t = argu"]],"start1":4842,"start2":4842,"length1":17,"length2":17},{"diffs":[[0,"ch( e ){\r\n      "],[-1,"throw"],[1,"step.task.raise("],[0," e"],[1,")"],[0,"\r\n    }finally{\r"]],"start1":5171,"start2":5171,"length1":39,"length2":51}]],"length":12601,"saved":false}
{"ts":1352365170198,"patch":[[{"diffs":[[0,"tack  = []\r\n"],[1,"  this.stepCount   = 0\r\n"],[0,"  this.first"]],"start1":559,"start2":559,"length1":24,"length2":48},{"diffs":[[0," false\r\n"],[1,"  this.id        = ++task.stepCount\r\n"],[0,"}\r\nStep."]],"start1":2376,"start2":2376,"length1":16,"length2":53}]],"length":12662,"saved":false}
{"ts":1352369955350,"patch":[[{"diffs":[[0," parent ){\r\n"],[1,"  this.id         = ++TaskCount\r\n"],[0,"  this.isRoo"]],"start1":390,"start2":390,"length1":24,"length2":57},{"diffs":[[0,"asks"],[-1,".push( this)\r\n  }\r\n  this.subTasks    = []"],[1,"[task.id] = this\r\n    this.parentTask.subTaskCount++\r\n  }\r\n  this.subTasks        = {}\r\n  this.subTaskCount    = 0\r\n  this.queuedTasks     = {}\r\n  this.queuedTaskCount = 0"],[0,"\r\n  "]],"start1":531,"start2":531,"length1":50,"length2":179},{"diffs":[[0," = false\r\n\r\n"],[1,"var TaskCount   = 0\r\n"],[0,"var CurrentS"]],"start1":1157,"start2":1157,"length1":24,"length2":45},{"diffs":[[0," this\r\n}\r\n\r\n"],[1,"Task.taskDone = function task_done( subtask ){\r\n\r\n}\r\n\r\n"],[0,"Task.walk = "]],"start1":4679,"start2":4679,"length1":24,"length2":79},{"diffs":[[0,"ise( e)\r\n    }\r\n"],[1,"  }finally{\r\n    if( task.parent ){\r\n      task.taskDone( task)\r\n    }\r\n"],[0,"  }\r\n}\r\n\r\nTask.f"]],"start1":7206,"start2":7206,"length1":32,"length2":104}]],"length":12972,"saved":false}
{"ts":1352371079679,"patch":[[{"diffs":[[0,"ent ){\r\n    "],[-1,"this."],[0,"parent"],[-1,"Task"],[0,".subTasks[ta"]],"start1":499,"start2":499,"length1":39,"length2":30},{"diffs":[[0,"is\r\n    "],[-1,"this."],[0,"parent"],[-1,"Task"],[0,".subTask"]],"start1":540,"start2":540,"length1":31,"length2":22},{"diffs":[[0,"subtask ){\r\n"],[1,"  if( this.isRoot )return CurrentStep.task.taskDone( subtask)\r\n  if( this.parent ){\r\n    if( this.parent.queuedTasks[this.id] ){\r\n      delete this.parent.queuedTasks[this.id]\r\n      if( this.parent.subTaskCount-- === 0 ){\r\n        this.parent.resume()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nTask.pause = function pause(){\r\n  if( this.isRoot )return CurrentStep.task.pause()\r\n  task.pausedStep = task.currentStep\r\n  return this\r\n}\r\n\r\nTask.resume = function resume(){\r\n  if( this.isRoot )return CurrentStep.task.resume()\r\n  return this\r\n}"],[0,"\r\n"],[-1,"}"],[0,"\r\n\r\nTask.wal"]],"start1":4709,"start2":4709,"length1":27,"length2":551}]],"length":13478,"saved":false}
{"ts":1352371219681,"patch":[[{"diffs":[[0,"sume()\r\n"],[1,"  var paused_step = this.pausedStep\r\n  this.pausedStep = null\r\n  paused_step.scheduleNext()\r\n"],[0,"  return"]],"start1":5222,"start2":5222,"length1":16,"length2":109}]],"length":13571,"saved":false}
{"ts":1352371271157,"patch":[[{"diffs":[[0,"tep = null\r\n"],[1,"  this.pausedStep  = null\r\n"],[0,"  this.stepR"]],"start1":808,"start2":808,"length1":24,"length2":51}]],"length":13598,"saved":false}
{"ts":1352371713190,"patch":[[{"diffs":[[0,", null, block)\r\n"],[1,"  this.queuedTasks[task.id] = task\r\n  this.queuedTaskCount++\r\n"],[0,"  return this\r\n}"]],"start1":4664,"start2":4664,"length1":32,"length2":94},{"diffs":[[0,"   t( \"final\")\r\n"],[1,"     test_5()\r\n   })\r\n  })\r\n\r\n  var test_5 = L8.scope( function test5(){\r\n    test = 5\r\n    this\r\n    .fork( function(){ t( \"fork 1\") })\r\n    .fork( function(){ t( \"fork 2\") })\r\n    .step( function(){ t( \"joined\") })\r\n    .final( function(){\r\n     t( \"final\")\r\n"],[0,"     test_last()"]],"start1":13224,"start2":13224,"length1":32,"length2":293}]],"length":13921,"saved":false}
{"ts":1352371877019,"patch":[[{"diffs":[[0,"t.resume()\r\n"],[1,"        // ToDo: error propagation\r\n"],[0,"      }\r\n   "]],"start1":5052,"start2":5052,"length1":24,"length2":60}]],"length":13957,"saved":false}
{"ts":1352372807723,"patch":[[{"diffs":[[0,"w Task( this"],[-1,".task"],[0,")\r\n  var ste"]],"start1":4604,"start2":4604,"length1":29,"length2":24}]],"length":13952,"saved":false}
{"ts":1352382473210,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"CurrentStep = null // new Step( L8, null, null, null)\r\n\r\n"],[0,"Task"]],"start1":2637,"start2":2637,"length1":65,"length2":8},{"diffs":[[0,"{\r\n  task = "],[-1,"CurrentStep"],[1,"this.isRoot"],[0," ? CurrentSt"]],"start1":2683,"start2":2683,"length1":35,"length2":35},{"diffs":[[0,"k.push( "],[-1,"C"],[1,"task.c"],[0,"urrentSt"]],"start1":2814,"start2":2814,"length1":17,"length2":22},{"diffs":[[0,"ar task "],[-1," "],[0,"="],[1," this.isRoot ? CurrentStep.task :"],[0," this\r\n "]],"start1":2908,"start2":2908,"length1":18,"length2":50},{"diffs":[[0,"return t"],[-1,"his"],[1,"ask"],[0,"\r\n})\r\n\r\n"]],"start1":3231,"start2":3231,"length1":19,"length2":19},{"diffs":[[0," function(){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot )re"]],"start1":3280,"start2":3280,"length1":35,"length2":42},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":3303,"start2":3303,"length1":39,"length2":33},{"diffs":[[0,"tep.task"],[-1,".isDone"],[1," : this"],[0,"\r\n  retu"]],"start1":3329,"start2":3329,"length1":23,"length2":23},{"diffs":[[0,"\r\n  return t"],[-1,"his"],[1,"ask"],[0,".isDone\r\n})\r"]],"start1":3344,"start2":3344,"length1":27,"length2":27},{"diffs":[[0," function(){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot )re"]],"start1":3407,"start2":3407,"length1":35,"length2":42},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":3430,"start2":3430,"length1":39,"length2":33},{"diffs":[[0,"tep.task"],[-1,".succeed"],[1," : this"],[0,"\r\n  retu"]],"start1":3456,"start2":3456,"length1":24,"length2":23},{"diffs":[[0,"this\r\n  return t"],[-1,"his"],[1,"ask"],[0,".isDone && !this"]],"start1":3467,"start2":3467,"length1":35,"length2":35},{"diffs":[[0,"ne && !t"],[-1,"his"],[1,"ask"],[0,".err\r\n})"]],"start1":3491,"start2":3491,"length1":19,"length2":19},{"diffs":[[0," function(){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot )re"]],"start1":3544,"start2":3544,"length1":35,"length2":42},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":3567,"start2":3567,"length1":39,"length2":33},{"diffs":[[0,"tep.task"],[-1,".fail"],[1," : this"],[0,"\r\n  retu"]],"start1":3593,"start2":3593,"length1":21,"length2":23},{"diffs":[[0,"return t"],[-1,"his"],[1,"ask"],[0,".isDone "]],"start1":3612,"start2":3612,"length1":19,"length2":19},{"diffs":[[0,"one && t"],[-1,"his"],[1,"ask"],[0,".err\r\n})"]],"start1":3627,"start2":3627,"length1":19,"length2":19},{"diffs":[[0,"\r\n  "],[-1,"if( this.isRoot )return CurrentStep.task.stepResult\r\n  return this"],[1,"return task"],[0,".ste"]],"start1":3694,"start2":3694,"length1":74,"length2":19},{"diffs":[[0,"n( val){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot"]],"start1":3768,"start2":3768,"length1":27,"length2":34},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":3787,"start2":3787,"length1":39,"length2":33},{"diffs":[[0,"tep.task"],[-1,".stepResult = val"],[1," : this"],[0,"\r\n  retu"]],"start1":3813,"start2":3813,"length1":33,"length2":23},{"diffs":[[0,"\r\n  return t"],[-1,"his"],[1,"ask"],[0,".stepResult "]],"start1":3828,"start2":3828,"length1":27,"length2":27},{"diffs":[[0,"ction(){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot"]],"start1":3901,"start2":3901,"length1":27,"length2":34},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":3920,"start2":3920,"length1":39,"length2":33},{"diffs":[[0,"tep.task"],[-1,".err"],[1," : this"],[0,"\r\n  retu"]],"start1":3946,"start2":3946,"length1":20,"length2":23},{"diffs":[[0,"return t"],[-1,"his"],[1,"ask"],[0,".stepErr"]],"start1":3965,"start2":3965,"length1":19,"length2":19},{"diffs":[[0,"arent = "],[-1,"C"],[1,"this.c"],[0,"urrentSt"]],"start1":4224,"start2":4224,"length1":17,"length2":22},{"diffs":[[0,"s.currentStep ? "],[-1,"C"],[1,"this.c"],[0,"urrentStep.paren"]],"start1":4235,"start2":4235,"length1":33,"length2":38},{"diffs":[[0,": null\r\n"],[1,"  if( NextStep && NextStep.task !== this ){\r\n    throw \"Cannot create step, not same task\"\r\n  }\r\n"],[0,"  var in"]],"start1":4275,"start2":4275,"length1":16,"length2":113},{"diffs":[[0,"rk( block ){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot )re"]],"start1":4549,"start2":4549,"length1":35,"length2":42},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":4572,"start2":4572,"length1":39,"length2":33},{"diffs":[[0,"task"],[-1,".fork( block)"],[1," : this"],[0,"\r\n  var "],[1,"new_"],[0,"task"]],"start1":4602,"start2":4602,"length1":29,"length2":27},{"diffs":[[0," Task( t"],[-1,"his"],[1,"ask"],[0,")\r\n  var"]],"start1":4635,"start2":4635,"length1":19,"length2":19},{"diffs":[[0,"ep( "],[1,"new_"],[0,"task, "],[-1,"C"],[1,"task.c"],[0,"urre"]],"start1":4668,"start2":4668,"length1":15,"length2":24},{"diffs":[[0,"queuedTasks["],[1,"new_"],[0,"task.id] = t"]],"start1":4721,"start2":4721,"length1":24,"length2":28},{"diffs":[[0,"nt++\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n}\r\n\r\nTask.task"]],"start1":4774,"start2":4774,"length1":35,"length2":35},{"diffs":[[0,"( subtask ){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot )re"]],"start1":4834,"start2":4834,"length1":35,"length2":42},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":4857,"start2":4857,"length1":39,"length2":33},{"diffs":[[0,"task"],[-1,".taskDone( subtask)"],[1," : this"],[0,"\r\n  "]],"start1":4887,"start2":4887,"length1":27,"length2":15},{"diffs":[[0,"his\r\n  if( t"],[-1,"his"],[1,"ask"],[0,".parent ){\r\n"]],"start1":4895,"start2":4895,"length1":27,"length2":27},{"diffs":[[0,"nt ){\r\n    if( t"],[-1,"his"],[1,"ask"],[0,".parent.queuedTa"]],"start1":4915,"start2":4915,"length1":35,"length2":35},{"diffs":[[0,"ueuedTasks[t"],[-1,"his"],[1,"ask"],[0,".id] ){\r\n   "]],"start1":4943,"start2":4943,"length1":27,"length2":27},{"diffs":[[0,"delete t"],[-1,"his"],[1,"ask"],[0,".parent."]],"start1":4973,"start2":4973,"length1":19,"length2":19},{"diffs":[[0,"   if( t"],[-1,"his"],[1,"ask"],[0,".parent."]],"start1":5017,"start2":5017,"length1":19,"length2":19},{"diffs":[[0,"       t"],[-1,"his"],[1,"ask"],[0,".parent."]],"start1":5062,"start2":5062,"length1":19,"length2":19},{"diffs":[[0,"ion pause(){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot )re"]],"start1":5171,"start2":5171,"length1":35,"length2":42},{"diffs":[[0,"k = this.isRoot "],[-1,")return"],[1,"?"],[0," CurrentStep.tas"]],"start1":5194,"start2":5194,"length1":39,"length2":33},{"diffs":[[0,"task"],[-1,".pause()"],[1," : this"],[0,"\r\n  "]],"start1":5224,"start2":5224,"length1":16,"length2":15},{"diffs":[[0,"Step\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n}\r\n\r\nTask.resu"]],"start1":5269,"start2":5269,"length1":35,"length2":35},{"diffs":[[0,"esume(){\r\n  "],[-1,"if("],[1,"var task ="],[0," this.isRoot"]],"start1":5319,"start2":5319,"length1":27,"length2":34},{"diffs":[[0,".isRoot "],[-1,")return"],[1,"?"],[0," Current"]],"start1":5346,"start2":5346,"length1":23,"length2":17},{"diffs":[[0,"tep.task"],[-1,".resume()"],[1," : this"],[0,"\r\n  var "]],"start1":5364,"start2":5364,"length1":25,"length2":23},{"diffs":[[0,"step = t"],[-1,"his"],[1,"ask"],[0,".pausedS"]],"start1":5394,"start2":5394,"length1":19,"length2":19},{"diffs":[[0,"sedStep\r\n  t"],[-1,"his"],[1,"ask"],[0,".pausedStep "]],"start1":5409,"start2":5409,"length1":27,"length2":27},{"diffs":[[0,"\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n}\r\n\r\n\r\nTas"]],"start1":5472,"start2":5472,"length1":27,"length2":27},{"diffs":[[0,"( block ){\r\n"],[1,"  var task = this.isRoot ? CurrentStep.task : this\r\n"],[0,"  var step ="]],"start1":5521,"start2":5521,"length1":24,"length2":76},{"diffs":[[0,"s\r\n  var step = "],[-1,"C"],[1,"task.c"],[0,"urrentStep\r\n  if"]],"start1":5582,"start2":5582,"length1":33,"length2":38},{"diffs":[[0,"alse\r\n  "],[-1,"step."],[1,"return function walk_cb(){\r\n    if( "],[0,"task.cur"]],"start1":5704,"start2":5704,"length1":21,"length2":52},{"diffs":[[0,"tep "],[1,"!"],[0,"= step"],[1," ){"],[0,"\r\n  "],[-1,"var that = this\r\n  return function walk_cb(){"],[1,"    throw \"Cannot walk same step again\"\r\n    }"],[0,"\r\n  "]],"start1":5761,"start2":5761,"length1":63,"length2":68},{"diffs":[[0,"== 1 ){\r\n      t"],[-1,"hat"],[1,"ask"],[0,".stepResult = ar"]],"start1":5914,"start2":5914,"length1":35,"length2":35},{"diffs":[[0,"se{\r\n      t"],[-1,"hat"],[1,"ask"],[0,".stepResult "]],"start1":5968,"start2":5968,"length1":27,"length2":27},{"diffs":[[0,"       t"],[-1,"hat"],[1,"ask"],[0,".stepRes"]],"start1":6046,"start2":6046,"length1":19,"length2":19},{"diffs":[[0,".apply( "],[-1,"step."],[0,"task, ar"]],"start1":6076,"start2":6076,"length1":21,"length2":16},{"diffs":[[0,"   if( t"],[-1,"hat"],[1,"ask"],[0,".current"]],"start1":6114,"start2":6114,"length1":19,"length2":19},{"diffs":[[0,"){\r\n"],[-1,"        that.currentStep = null\r\n"],[0,"    "]],"start1":6147,"start2":6147,"length1":41,"length2":8},{"diffs":[[0,"\r\n      "],[-1,"step."],[0,""],[1,""],[0,"task.rai"]],"start1":6283,"start2":6283,"length1":21,"length2":16},{"diffs":[[0,"s.next\r\n"],[1,"  var task     = this.task\r\n  task.currentStep = this\r\n"],[0,"  try{\r\n"]],"start1":6706,"start2":6706,"length1":16,"length2":71},{"diffs":[[0,"\r\n      "],[-1,"this."],[0,"task.ste"]],"start1":6798,"start2":6798,"length1":21,"length2":16},{"diffs":[[0,".apply( "],[-1,"this."],[0,"task)\r\n "]],"start1":6834,"start2":6834,"length1":21,"length2":16},{"diffs":[[0,"block ){\r\n  "],[-1,"this"],[1,"var task = this.isRoot ? CurrentStep.task : this\r\n  task"],[0,".finalBlock "]],"start1":8178,"start2":8178,"length1":28,"length2":80},{"diffs":[[0,"lock\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n}\r\n\r\nTask.erro"]],"start1":8261,"start2":8261,"length1":35,"length2":35},{"diffs":[[0,"block ){\r\n  "],[-1,"this"],[1,"var task = this.isRoot ? CurrentStep.task : this\r\n  task"],[0,".errorBlock "]],"start1":8316,"start2":8316,"length1":28,"length2":80},{"diffs":[[0,"lock\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n}\r\n\r\nTask.succ"]],"start1":8399,"start2":8399,"length1":35,"length2":35},{"diffs":[[0,"k ){\r\n  "],[-1,"this"],[1,"var task = this.isRoot ? CurrentStep.task : this\r\n  task"],[0,".success"]],"start1":8462,"start2":8462,"length1":20,"length2":72},{"diffs":[[0,"lock\r\n  return t"],[-1,"his"],[1,"ask"],[0,"\r\n}\r\n\r\nTask.slee"]],"start1":8543,"start2":8543,"length1":35,"length2":35},{"diffs":[[0,"var "],[-1,"step = CurrentStep\r\n  var task = step.task"],[1,"task = this.isRoot ? CurrentStep.task : this\r\n  var step = task.currentStep"],[0,"\r\n  "]],"start1":8610,"start2":8610,"length1":50,"length2":83},{"diffs":[[0,"\n  }"],[-1,"\r\n  task.currentStep = step"],[0,""],[1,""],[0,"\r\n  "]],"start1":8754,"start2":8754,"length1":35,"length2":8}]],"length":14240,"saved":false}
{"ts":1352382513743,"patch":[[{"diffs":[[0,"ot ? CurrentStep"],[-1,".task"],[1," ? CurrentStep.task : L8"],[0," : L8\r\n  if( tas"]],"start1":2704,"start2":2704,"length1":37,"length2":56}]],"length":14259,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352388038676,"patch":[[{"diffs":[[0,"e = Step\r\n\r\n"],[1,"Task.toString = function task_to_string(){ return \"Task \" + this.id }\r\n\r\n"],[0,"Task.__defin"]],"start1":2629,"start2":2629,"length1":24,"length2":97},{"diffs":[[0,"ull)\r\n})\r\n\r\n"],[1,"Step.toString = function(){ return this.task.toString() + \"/\" + this.id }\r\n\r\n"],[0,"Step.schedul"]],"start1":6553,"start2":6553,"length1":24,"length2":101}]],"length":14409,"saved":false}
{"ts":1352388811358,"patch":[[{"diffs":[[0,"shift() ){\r\n"],[1,"      step.execute()\r\n"],[0,"      step.s"]],"start1":1482,"start2":1482,"length1":24,"length2":46},{"diffs":[[0,"   step.schedule"],[-1,"r"],[1,"Next"],[0,"()\r\n    }\r\n    L"]],"start1":1519,"start2":1519,"length1":33,"length2":36},{"diffs":[[0,"\r\n  "],[-1,"task.pausedStep = task.currentStep"],[1,"var step = task.currentStep\r\n  if( !step.isRunning ){\r\n      throw \"Cannot pause, not running step\"\r\n  }\r\n  task.pausedStep = step\r\n  step.isRunning = false"],[0,"\r\n  "]],"start1":5352,"start2":5352,"length1":42,"length2":164},{"diffs":[[0,"\r\n  "],[-1,"task.pausedStep = null"],[1,"if( paused_step.isRunning ){\r\n    throw \"Cannot resume, running step\"\r\n  }\r\n  task.pausedStep = null\r\n  paused_step.isRunning = true"],[0,"\r\n  "]],"start1":5655,"start2":5655,"length1":30,"length2":140},{"diffs":[[0,"\n\r\nStep."],[-1,"scheduler"],[1,"execute"],[0," = funct"]],"start1":6896,"start2":6896,"length1":25,"length2":23},{"diffs":[[0,"on step_"],[-1,"scheduler"],[1,"execute"],[0,"(){\r\n  i"]],"start1":6920,"start2":6920,"length1":25,"length2":23},{"diffs":[[0,"y{\r\n"],[-1,"    this.scheduleNext()\r\n"],[0,"    "]],"start1":7368,"start2":7368,"length1":33,"length2":8},{"diffs":[[0,"d_next\r\n"],[-1,"    L8.scheduler()\r\n"],[0,"  }\r\n}\r\n"]],"start1":7420,"start2":7420,"length1":36,"length2":16}]],"length":14617,"saved":false}
{"ts":1352389072574,"patch":[[{"diffs":[[0,"sRunning ){\r\n   "],[1," // ToDo: test/allow multiple walk()\r\n    //"],[0," throw \"Can't wa"]],"start1":5978,"start2":5978,"length1":32,"length2":76}]],"length":14661,"saved":false}
{"ts":1352389164434,"patch":[[{"diffs":[[0,"= step ){\r\n     "],[1," // ToDo: quid if multiple walk() fire?\r\n      //"],[0," throw \"Cannot w"]],"start1":6159,"start2":6159,"length1":32,"length2":81}]],"length":14710,"saved":false}
{"ts":1352389838419,"patch":[[{"diffs":[[0,"block)\r\n"],[1,"  L8.enqueueStep( step)\r\n"],[0,"  this.q"]],"start1":4823,"start2":4823,"length1":16,"length2":41},{"diffs":[[0,"tStep !="],[1,"="],[0," step ){"]],"start1":6177,"start2":6177,"length1":16,"length2":17}]],"length":14736,"saved":false}
{"ts":1352390341585,"patch":[[{"diffs":[[0," 1\")"],[-1," })\r\n    .fork( function(){ t( \"fork 2\")"],[1,"\r\n      this\r\n      .step( function(){ this.sleep( 10)  })\r\n      .step( function(){ t( \"end fork 1\") })\r\n    })\r\n    .fork( function(){ t( \"fork 2\")\r\n      this\r\n      .step( function(){ this.sleep( 5)   })\r\n      .step( function(){ t( \"end fork 2\") })\r\n   "],[0," })\r"]],"start1":14184,"start2":14184,"length1":48,"length2":266}]],"length":14954,"saved":false}
{"ts":1352391048862,"patch":[[{"diffs":[[0," task)\r\n"],[1,"  var scoped_block = task.scope( block)\r\n"],[0,"  var st"]],"start1":4758,"start2":4758,"length1":16,"length2":57},{"diffs":[[0,", null, "],[1,"scoped_"],[0,"block)\r\n"]],"start1":4856,"start2":4856,"length1":16,"length2":23},{"diffs":[[0,"   })\r\n   .step("],[1," "],[0," function(){ t(\""]],"start1":13965,"start2":13965,"length1":32,"length2":33},{"diffs":[[0," step\") })\r\n"],[-1,""],[0,"   .error( f"]],"start1":14003,"start2":14003,"length1":24,"length2":24},{"diffs":[[0,"this\r\n    .fork("],[1,"  "],[0," function(){ t( "]],"start1":14196,"start2":14196,"length1":32,"length2":34},{"diffs":[[0,"  .fork("],[1,"  "],[0," functio"]],"start1":14355,"start2":14355,"length1":16,"length2":18},{"diffs":[[0,"  })\r\n    .step("],[1,"  "],[0," function(){ t( "]],"start1":14498,"start2":14498,"length1":32,"length2":34},{"diffs":[[0,"nction(){\r\n     "],[1," "],[0,"t( \"final\")\r\n   "]],"start1":14560,"start2":14560,"length1":32,"length2":33},{"diffs":[[0,"   t( \"final\")\r\n"],[1," "],[0,"     test_last()"]],"start1":14574,"start2":14574,"length1":32,"length2":33}]],"length":15011,"saved":false}
{"ts":1352391221781,"patch":[[{"diffs":[[0,"e\r\n}\r\n\r\n"],[-1,"L8"],[1,"Task"],[0,".scope ="]],"start1":1734,"start2":1734,"length1":18,"length2":20},{"diffs":[[0,"catch( e"],[1," "],[0,"){\r\n    "]],"start1":1934,"start2":1934,"length1":16,"length2":17}]],"length":15014,"saved":false}
{"ts":1352391831690,"patch":[[{"diffs":[[0,"il.puts("],[1," buf ="],[0," buf.joi"]],"start1":344,"start2":344,"length1":16,"length2":22},{"diffs":[[0,"\", \"))\r\n"],[1,"  return buf\r\n"],[0,"}\r\n\r\nfun"]],"start1":369,"start2":369,"length1":16,"length2":30},{"diffs":[[0,"st : \"\")"],[1,", CurrentStep"],[0,"]\r\n    f"]],"start1":12513,"start2":12513,"length1":16,"length2":29},{"diffs":[[0,"s[ii])\r\n    "],[1,"return "],[0,"trace.apply("]],"start1":12608,"start2":12608,"length1":24,"length2":31}]],"length":15054,"saved":false}
{"ts":1352391858070,"patch":[[{"diffs":[[0,"t : \"\"),"],[1," \"\" +"],[0," Current"]],"start1":12514,"start2":12514,"length1":16,"length2":21}]],"length":15059,"saved":false}
{"ts":1352392050949,"patch":[[{"diffs":[[0," 5\r\n    this"],[1,".label = t( \"start\")"],[0,"\r\n    .fork("]],"start1":14236,"start2":14236,"length1":24,"length2":44},{"diffs":[[0,"k(   function(){"],[1," this.label ="],[0," t( \"fork 1\")\r\n "]],"start1":14278,"start2":14278,"length1":32,"length2":45},{"diffs":[[0," function(){"],[1," this.label ="],[0," t( \"fork 2\""]],"start1":14446,"start2":14446,"length1":24,"length2":37}]],"length":15105,"saved":false}
{"ts":1352392152003,"patch":[[{"diffs":[[0,"( \"start\")\r\n"],[1,"    this\r\n"],[0,"    .fork(  "]],"start1":14258,"start2":14258,"length1":24,"length2":34}]],"length":15115,"saved":false}
{"ts":1352392554790,"patch":[[{"diffs":[[0,"= this.isRoot ? "],[1,"("],[0,"CurrentStep ? Cu"]],"start1":2814,"start2":2814,"length1":32,"length2":33},{"diffs":[[0,"ask : L8"],[1,")"],[0," : "],[-1,"L8"],[1,"this"],[0,"\r\n  if( "]],"start1":2858,"start2":2858,"length1":21,"length2":24}]],"length":15119,"saved":false}
{"ts":1352393301080,"patch":[[{"diffs":[[0,"k.firstStep "],[1,"&& !task.queuedTaskCount "],[0,"){\r\n      L8"]],"start1":3306,"start2":3306,"length1":24,"length2":49}]],"length":15144,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352394154757,"patch":[[{"diffs":[[0,"_down = "],[-1,"5"],[1,"10"],[0,"\r\nsetInt"]],"start1":14927,"start2":14927,"length1":17,"length2":18}]],"length":15145,"saved":false}
{"ts":1352394530630,"patch":[[{"diffs":[[0,"rent ){\r\n    if("],[1," task.parent.queuedTaskCount &&"],[0," task.parent.que"]],"start1":5155,"start2":5155,"length1":32,"length2":63},{"diffs":[[0,".id]\r\n      if( "],[1,"--"],[0,"task.parent.subT"]],"start1":5281,"start2":5281,"length1":32,"length2":34},{"diffs":[[0,"task.parent."],[-1,"sub"],[1,"queued"],[0,"TaskCount-- "]],"start1":5299,"start2":5299,"length1":27,"length2":30},{"diffs":[[0,"askCount"],[-1,"--"],[0," === 0 )"]],"start1":5318,"start2":5318,"length1":18,"length2":16},{"diffs":[[0,"\n      task."],[1,"parent."],[0,"taskDone( ta"]],"start1":8733,"start2":8733,"length1":24,"length2":31}]],"length":15186,"saved":false}
{"ts":1352394669311,"patch":[[{"diffs":[[0,"s.parent"],[1,"Step"],[0," = paren"]],"start1":2108,"start2":2108,"length1":16,"length2":20},{"diffs":[[0,"block  ="],[1," task.scope("],[0," block"],[1,")"],[0,"\r\n  if( "]],"start1":2138,"start2":2138,"length1":22,"length2":35},{"diffs":[[0," if( task.parent"],[1,"Task"],[0," ){\r\n      task."]],"start1":8657,"start2":8657,"length1":32,"length2":36},{"diffs":[[0,"k.parent"],[1,"Task"],[0,".raise( "]],"start1":8691,"start2":8691,"length1":16,"length2":20},{"diffs":[[0," if( task.parent"],[1,"Task"],[0," ){\r\n      task."]],"start1":8738,"start2":8738,"length1":32,"length2":36},{"diffs":[[0,"k.parent"],[1,"Task"],[0,".taskDon"]],"start1":8772,"start2":8772,"length1":16,"length2":20}]],"length":15219,"saved":false}
{"ts":1352394719949,"patch":[[{"diffs":[[0,"r parent"],[1,"_step"],[0," = this."]],"start1":4407,"start2":4407,"length1":16,"length2":21},{"diffs":[[0,"p.parent"],[1,"Step"],[0," : null\r"]],"start1":4457,"start2":4457,"length1":16,"length2":20},{"diffs":[[0,", parent"],[1,"_step"],[0,", insert"]],"start1":4669,"start2":4669,"length1":16,"length2":21}]],"length":15233,"saved":false}
{"ts":1352394860492,"patch":[[{"diffs":[[0,"this\r\n  "],[-1,"if( task."],[1,"var parent = task.parentTask\r\n  if( "],[0,"parent )"]],"start1":5167,"start2":5167,"length1":25,"length2":52},{"diffs":[[0,"){\r\n    if( "],[-1,"task."],[0,"parent.queue"]],"start1":5218,"start2":5218,"length1":29,"length2":24},{"diffs":[[0,"askCount"],[-1," && task."],[1,"\r\n    &&  "],[0,"parent.q"]],"start1":5244,"start2":5244,"length1":25,"length2":26},{"diffs":[[0,"task.id]"],[1,"\r\n   "],[0," ){\r\n   "]],"start1":5281,"start2":5281,"length1":16,"length2":21},{"diffs":[[0," delete "],[-1,"task."],[0,"parent.q"]],"start1":5304,"start2":5304,"length1":21,"length2":16},{"diffs":[[0,"dTasks[t"],[-1,"his"],[1,"ask"],[0,".id]\r\n  "]],"start1":5324,"start2":5324,"length1":19,"length2":19},{"diffs":[[0,"  if( --"],[-1,"task."],[0,"parent.q"]],"start1":5345,"start2":5345,"length1":21,"length2":16},{"diffs":[[0,"){\r\n        "],[-1,"task."],[0,"parent.resum"]],"start1":5382,"start2":5382,"length1":29,"length2":24}]],"length":15246,"saved":false}
{"ts":1352394921334,"patch":[[{"diffs":[[0," = this.isRoot ?"],[1," (CurrentStep ?"],[0," CurrentStep.tas"]],"start1":5131,"start2":5131,"length1":32,"length2":47},{"diffs":[[0,"rrentStep.task :"],[1," L8) :"],[0," this\r\n  var par"]],"start1":5165,"start2":5165,"length1":32,"length2":38}]],"length":15267,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352396433891,"patch":[[{"diffs":[[0,"enqueueStep("],[1," stack.push("],[0," task.firstS"]],"start1":3373,"start2":3373,"length1":24,"length2":36},{"diffs":[[0,"k.firstStep)"],[1,")"],[0,"\r\n    }\r\n  }"]],"start1":3401,"start2":3401,"length1":24,"length2":25},{"diffs":[[0,"   }\r\n    try{\r\n"],[1,"      // ToDo: block should run as if from next step ?\r\n      // ToDo: block should run as a new step ?\r\n"],[0,"      if( block "]],"start1":6689,"start2":6689,"length1":32,"length2":137}]],"length":15385,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352398134565,"patch":[[{"diffs":[[0,"rstStep "],[-1,"&&"],[1,"){\r\n      if("],[0," !task.q"]],"start1":3327,"start2":3327,"length1":18,"length2":29},{"diffs":[[0,"t ){\r\n      "],[1,"  "],[0,"L8.enqueueSt"]],"start1":3369,"start2":3369,"length1":24,"length2":26},{"diffs":[[0,"eueStep("],[1," task.firstStep)\r\n      }\r\n     "],[0," stack.p"]],"start1":3390,"start2":3390,"length1":16,"length2":48},{"diffs":[[0,"rstStep)"],[-1,")"],[0,"\r\n    }\r"]],"start1":3450,"start2":3450,"length1":17,"length2":16}]],"length":15429,"saved":false}
{"ts":1352398362404,"patch":[[{"diffs":[[0,"( step)\r\n  t"],[-1,"his"],[1,"ask"],[0,".queuedTasks"]],"start1":5035,"start2":5035,"length1":27,"length2":27},{"diffs":[[0,"k.id] = "],[1,"new_"],[0,"task\r\n  "]],"start1":5070,"start2":5070,"length1":16,"length2":20},{"diffs":[[0,"ew_task\r\n  t"],[-1,"his"],[1,"ask"],[0,".queuedTaskC"]],"start1":5079,"start2":5079,"length1":27,"length2":27}]],"length":15433,"saved":false}
{"ts":1352398788390,"patch":[[{"diffs":[[0,"\r\n}\r\n\r\nTask."],[1,"sub"],[0,"taskDone = f"]],"start1":5127,"start2":5127,"length1":24,"length2":27},{"diffs":[[0," = function "],[1,"sub"],[0,"task_done( s"]],"start1":5150,"start2":5150,"length1":24,"length2":27},{"diffs":[[0,"\r\n  "],[-1,"var parent = task.parentTask\r\n  if( parent ){\r\n    if( parent"],[1,"if( task"],[0,".que"]],"start1":5259,"start2":5259,"length1":69,"length2":16},{"diffs":[[0,"\r\n  "],[-1," "],[-1," "],[0,"&&  "],[-1,"parent"],[1,"task"],[0,".que"]],"start1":5287,"start2":5287,"length1":20,"length2":16},{"diffs":[[0,"ask.queuedTasks["],[1,"sub"],[0,"task.id]\r\n    ){"]],"start1":5296,"start2":5296,"length1":32,"length2":35},{"diffs":[[0,"sk.id]\r\n"],[-1,"  "],[0,"  ){\r\n  "]],"start1":5317,"start2":5317,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1," "],[-1," "],[0,"delete "],[-1,"parent"],[1,"task"],[0,".que"]],"start1":5331,"start2":5331,"length1":23,"length2":19},{"diffs":[[0,"queuedTasks["],[1,"sub"],[0,"task.id]\r\n  "]],"start1":5347,"start2":5347,"length1":24,"length2":27},{"diffs":[[0,"sk.id]\r\n"],[-1,"  "],[0,"    if( "]],"start1":5364,"start2":5364,"length1":18,"length2":16},{"diffs":[[0,"  if( --"],[-1,"parent"],[1,"task"],[0,".queuedT"]],"start1":5374,"start2":5374,"length1":22,"length2":20},{"diffs":[[0,"\r\n      "],[-1,"  parent"],[1,"task"],[0,".resume("]],"start1":5411,"start2":5411,"length1":24,"length2":20},{"diffs":[[0,"k.resume()\r\n"],[-1,"  "],[0,"      // ToD"]],"start1":5422,"start2":5422,"length1":26,"length2":24},{"diffs":[[0,"gation\r\n"],[-1,"      }\r\n"],[0,"    }\r\n "]],"start1":5460,"start2":5460,"length1":25,"length2":16},{"diffs":[[0,"entTask."],[1,"sub"],[0,"taskDone"]],"start1":8921,"start2":8921,"length1":16,"length2":19}]],"length":15366,"saved":false}
{"ts":1352399042548,"patch":[[{"diffs":[[0,"firstStep)\r\n"],[1,"      }else{\r\n        task.pausedStep = task.firstStep\r\n"],[0,"      }\r\n   "]],"start1":3404,"start2":3404,"length1":24,"length2":80}]],"length":15422,"saved":false}
{"ts":1352414155191,"patch":[[{"diffs":[[0,"block  ="],[1," block ?"],[0," task.sc"]],"start1":2138,"start2":2138,"length1":16,"length2":24},{"diffs":[[0,"cope( block)"],[1," : null"],[0,"\r\n  if( !pre"]],"start1":2161,"start2":2161,"length1":24,"length2":31},{"diffs":[[0,"next      = "],[-1,"null"],[1,"task.firstStep\r\n    if( this.next ){ this.next.previous = this }"],[0,"\r\n    task.f"]],"start1":2238,"start2":2238,"length1":28,"length2":88},{"diffs":[[0,"\r\n      }else{\r\n"],[1,"        var dummy_step = new Step( task, task.firstStep.parentStep)\r\n"],[0,"        task.pau"]],"start1":3489,"start2":3489,"length1":32,"length2":101}]],"length":15566,"saved":false}
